"use client"

import { useState, useEffect } from "react"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"
import { Badge } from "@/components/ui/badge"
import { Progress } from "@/components/ui/progress"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Checkbox } from "@/components/ui/checkbox"
import { RewardSystem } from "@/components/reward-system"
import { HabitLoopForm } from "@/components/habit-loop-form"
import { CalendarView } from "@/components/calendar-view"
import { useLocalStorage } from "@/hooks/use-local-storage"
import { LearningMethodsInfo } from "@/components/learning-methods-info"
import { DailyTasks, generateDailyTasks, type DailyTask } from "@/components/daily-tasks"
import { Leaderboard } from "@/components/leaderboard"
import { KeywordVerificationDialog } from "@/components/keyword-verification-dialog"
import { SuccessCurve } from "@/components/success-curve"
import { ClassChat } from "@/components/class-chat"
import {
  Plus,
  Users,
  BookOpen,
  Target,
  TrendingUp,
  Zap,
  CheckCircle,
  LogOut,
  UserCheck,
  GraduationCap,
  Coins,
  Trophy,
  Star,
  CalendarIcon,
  Save,
  Download,
} from "lucide-react"
import { LearningMethods } from "@/components/learning-methods"
import { EmailNotifications } from "@/components/email-notifications"

interface CalendarEvent {
  id: string
  title: string
  description: string
  date: string
  type: "exam" | "homework" | "appointment"
  completed?: boolean
  examSize?: "small" | "large"
  isAutoGenerated?: boolean
  parentEventId?: string
  reminderType?: "study" | "review" | "prime"
}

interface Student {
  id: string
  name: string
  accessCode: string
  habits: Gewohnheit[]
  learningMethods: LearningMethodProgress[]
  rewards: RewardData
  calendarEvents: CalendarEvent[]
  dailyTasks: DailyTask[]
  weeklyStats: {
    completedHabits: number
    completedTasks: number
    learningMethodsUsed: number
    totalPoints: number
  }
  activities: Array<{
    date: string
    type: "habit" | "task" | "learning"
    points: number
    name: string
  }>
  lastTaskDate?: string
  emailSettings?: {
    email: string
    enabled: boolean
    studyReminders: boolean
    homeworkReminders: boolean
    examReminders: boolean
    dailyDigest: boolean
  }
}

interface Gewohnheit {
  id: string
  name: string
  type: "good" | "bad"
  obvious?: string
  attractive?: string
  easy?: string
  satisfying?: string
  invisible?: string
  unattractive?: string
  difficult?: string
  unsatisfying?: string
  cue?: string
  craving?: string
  response?: string
  reward?: string
  streak: number
  completedToday: boolean
}

interface LearningMethodProgress {
  method: string
  sessionsThisWeek: number
  totalSessions: number
  lastUsed?: string
}

interface RewardData {
  elixir: number
  gold: number
  level: number
  experiencePoints: number
  nextLevelXP: number
}

interface User {
  id: string
  name: string
  type: "teacher" | "student"
}

interface ChatMessage {
  id: string
  senderId: string
  senderName: string
  senderType: "teacher" | "student"
  message: string
  timestamp: string
}

const learningMethods = [
  "Active Retrieval",
  "Flashcards",
  "Feynman-Methode",
  "Blurting/Brain Dumping",
  "Reasoning",
  "Mnemotechniken",
  "SQ3R Methode",
  "Teaching",
  "Chunking",
]

const getLearningMethodRequiredLevel = (method: string): number => {
  const levelRequirements = {
    "Active Retrieval": 1,
    Flashcards: 1,
    "Feynman-Methode": 2,
    "Blurting/Brain Dumping": 2,
    Reasoning: 3,
    Mnemotechniken: 3,
    "SQ3R Methode": 4,
    Teaching: 4,
    Chunking: 5,
  }
  return levelRequirements[method as keyof typeof levelRequirements] || 1
}

const isLearningMethodUnlocked = (method: string, studentLevel: number): boolean => {
  return studentLevel >= getLearningMethodRequiredLevel(method)
}

const initialStudents: Student[] = [
  {
    id: "1",
    name: "Anna Schmidt",
    accessCode: "AS7k9mP2",
    habits: [
      {
        id: "h1",
        name: "Täglich 30 Min lesen",
        type: "good",
        obvious: "Buch neben dem Bett legen",
        attractive: "Spannende Bücher auswählen",
        easy: "Nur 10 Seiten pro Tag",
        satisfying: "Fortschritt in App markieren",
        cue: "Nach dem Zähneputzen am Abend",
        craving: "Entspannung und Wissensdurst",
        response: "30 Minuten lesen",
        reward: "Gefühl der Entspannung und des Lernens",
        streak: 5,
        completedToday: true,
      },
    ],
    learningMethods: [
      { method: "Active Retrieval", sessionsThisWeek: 3, totalSessions: 15 },
      { method: "Flashcards", sessionsThisWeek: 2, totalSessions: 8 },
      { method: "Feynman-Methode", sessionsThisWeek: 0, totalSessions: 0 },
      { method: "Blurting/Brain Dumping", sessionsThisWeek: 0, totalSessions: 0 },
      { method: "Reasoning", sessionsThisWeek: 0, totalSessions: 0 },
      { method: "Mnemotechniken", sessionsThisWeek: 0, totalSessions: 0 },
      { method: "SQ3R Methode", sessionsThisWeek: 0, totalSessions: 0 },
    ],
    rewards: {
      elixir: 125,
      gold: 280,
      level: 3,
      experiencePoints: 180,
      nextLevelXP: 250,
    },
    calendarEvents: [
      {
        id: "e1",
        title: "Mathe-Prüfung",
        description: "Kapitel 1-5, Algebra und Geometrie",
        date: "2024-12-20",
        type: "exam",
      },
      {
        id: "e2",
        title: "Deutsch Hausaufgaben",
        description: "Aufsatz über Goethe schreiben",
        date: "2024-12-18",
        type: "homework",
        completed: false,
      },
    ],
    dailyTasks: generateDailyTasks("1"),
    weeklyStats: {
      completedHabits: 12,
      completedTasks: 8,
      learningMethodsUsed: 5,
      totalPoints: 340,
    },
    activities: [
      { date: new Date().toISOString(), type: "habit", points: 20, name: "Lesen" },
      { date: new Date(Date.now() - 86400000).toISOString(), type: "task", points: 15, name: "Mathe" },
    ],
  },
  {
    id: "2",
    name: "Anouk",
    accessCode: "An8xQ4vL",
    habits: [],
    learningMethods: learningMethods.map((method) => ({
      method,
      sessionsThisWeek: 0,
      totalSessions: 0,
    })),
    rewards: {
      elixir: 0,
      gold: 0,
      level: 1,
      experiencePoints: 0,
      nextLevelXP: 100,
    },
    calendarEvents: [],
    dailyTasks: generateDailyTasks("2"),
    weeklyStats: {
      completedHabits: 0,
      completedTasks: 0,
      learningMethodsUsed: 0,
      totalPoints: 0,
    },
    activities: [],
  },
  {
    id: "3",
    name: "Ayleen",
    accessCode: "Ay5nR9wM",
    habits: [],
    learningMethods: learningMethods.map((method) => ({
      method,
      sessionsThisWeek: 0,
      totalSessions: 0,
    })),
    rewards: {
      elixir: 0,
      gold: 0,
      level: 1,
      experiencePoints: 0,
      nextLevelXP: 100,
    },
    calendarEvents: [],
    dailyTasks: generateDailyTasks("3"),
    weeklyStats: {
      completedHabits: 0,
      completedTasks: 0,
      totalPoints: 0,
      learningMethodsUsed: 0,
    },
    activities: [],
  },
  {
    id: "4",
    name: "Can",
    accessCode: "Cn3pT7sK",
    habits: [],
    learningMethods: learningMethods.map((method) => ({
      method,
      sessionsThisWeek: 0,
      totalSessions: 0,
    })),
    rewards: {
      elixir: 0,
      gold: 0,
      level: 1,
      experiencePoints: 0,
      nextLevelXP: 100,
    },
    calendarEvents: [],
    dailyTasks: generateDailyTasks("4"),
    weeklyStats: {
      completedHabits: 0,
      completedTasks: 0,
      learningMethodsUsed: 0,
      totalPoints: 0,
    },
    activities: [],
  },
  {
    id: "5",
    name: "Cyril",
    accessCode: "Cy6mU2hJ",
    habits: [],
    learningMethods: learningMethods.map((method) => ({
      method,
      sessionsThisWeek: 0,
      totalSessions: 0,
    })),
    rewards: {
      elixir: 0,
      gold: 0,
      level: 1,
      experiencePoints: 0,
      nextLevelXP: 100,
    },
    calendarEvents: [],
    dailyTasks: generateDailyTasks("5"),
    weeklyStats: {
      completedHabits: 0,
      completedTasks: 0,
      learningMethodsUsed: 0,
      totalPoints: 0,
    },
    activities: [],
  },
  {
    id: "6",
    name: "Diego",
    accessCode: "Dg4vB8nQ",
    habits: [],
    learningMethods: learningMethods.map((method) => ({
      method,
      sessionsThisWeek: 0,
      totalSessions: 0,
    })),
    rewards: {
      elixir: 0,
      gold: 0,
      level: 1,
      experiencePoints: 0,
      nextLevelXP: 100,
    },
    calendarEvents: [],
    dailyTasks: generateDailyTasks("6"),
    weeklyStats: {
      completedHabits: 0,
      completedTasks: 0,
      learningMethodsUsed: 0,
      totalPoints: 0,
    },
    activities: [],
  },
  {
    id: "7",
    name: "Elias B.",
    accessCode: "EB9xL5tR",
    habits: [],
    learningMethods: learningMethods.map((method) => ({
      method,
      sessionsThisWeek: 0,
      totalSessions: 0,
    })),
    rewards: {
      elixir: 0,
      gold: 0,
      level: 1,
      experiencePoints: 0,
      nextLevelXP: 100,
    },
    calendarEvents: [],
    dailyTasks: generateDailyTasks("7"),
    weeklyStats: {
      completedHabits: 0,
      completedTasks: 0,
      learningMethodsUsed: 0,
      totalPoints: 0,
    },
    activities: [],
  },
  {
    id: "8",
    name: "Elias Z.",
    accessCode: "EZ2kM7wP",
    habits: [],
    learningMethods: learningMethods.map((method) => ({
      method,
      sessionsThisWeek: 0,
      totalSessions: 0,
    })),
    rewards: {
      elixir: 0,
      gold: 0,
      level: 1,
      experiencePoints: 0,
      nextLevelXP: 100,
    },
    calendarEvents: [],
    dailyTasks: generateDailyTasks("8"),
    weeklyStats: {
      completedHabits: 0,
      completedTasks: 0,
      learningMethodsUsed: 0,
      totalPoints: 0,
    },
    activities: [],
  },
  {
    id: "9",
    name: "Frida",
    accessCode: "Fr6nQ3sL",
    habits: [],
    learningMethods: learningMethods.map((method) => ({
      method,
      sessionsThisWeek: 0,
      totalSessions: 0,
    })),
    rewards: {
      elixir: 0,
      gold: 0,
      level: 1,
      experiencePoints: 0,
      nextLevelXP: 100,
    },
    calendarEvents: [],
    dailyTasks: generateDailyTasks("9"),
    weeklyStats: {
      completedHabits: 0,
      completedTasks: 0,
      learningMethodsUsed: 0,
      totalPoints: 0,
    },
    activities: [],
  },
  {
    id: "10",
    name: "Giorgio",
    accessCode: "Gg8vT4mK",
    habits: [],
    learningMethods: learningMethods.map((method) => ({
      method,
      sessionsThisWeek: 0,
      totalSessions: 0,
    })),
    rewards: {
      elixir: 0,
      gold: 0,
      level: 1,
      experiencePoints: 0,
      nextLevelXP: 100,
    },
    calendarEvents: [],
    dailyTasks: generateDailyTasks("10"),
    weeklyStats: {
      completedHabits: 0,
      completedTasks: 0,
      learningMethodsUsed: 0,
      totalPoints: 0,
    },
    activities: [],
  },
  {
    id: "11",
    name: "Jael",
    accessCode: "Jl5xR9hJ",
    habits: [],
    learningMethods: learningMethods.map((method) => ({
      method,
      sessionsThisWeek: 0,
      totalSessions: 0,
    })),
    rewards: {
      elixir: 0,
      gold: 0,
      level: 1,
      experiencePoints: 0,
      nextLevelXP: 100,
    },
    calendarEvents: [],
    dailyTasks: generateDailyTasks("11"),
    weeklyStats: {
      completedHabits: 0,
      completedTasks: 0,
      learningMethodsUsed: 0,
      totalPoints: 0,
    },
    activities: [],
  },
  {
    id: "12",
    name: "Janina",
    accessCode: "Jn7pU2wM",
    habits: [],
    learningMethods: learningMethods.map((method) => ({
      method,
      sessionsThisWeek: 0,
      totalSessions: 0,
    })),
    rewards: {
      elixir: 0,
      gold: 0,
      level: 1,
      experiencePoints: 0,
      nextLevelXP: 100,
    },
    calendarEvents: [],
    dailyTasks: generateDailyTasks("12"),
    weeklyStats: {
      completedHabits: 0,
      completedTasks: 0,
      learningMethodsUsed: 0,
      totalPoints: 0,
    },
    activities: [],
  },
  {
    id: "13",
    name: "Livio B.",
    accessCode: "LB4mT8nQ",
    habits: [],
    learningMethods: learningMethods.map((method) => ({
      method,
      sessionsThisWeek: 0,
      totalSessions: 0,
    })),
    rewards: {
      elixir: 0,
      gold: 0,
      level: 1,
      experiencePoints: 0,
      nextLevelXP: 100,
    },
    calendarEvents: [],
    dailyTasks: generateDailyTasks("13"),
    weeklyStats: {
      completedHabits: 0,
      completedTasks: 0,
      learningMethodsUsed: 0,
      totalPoints: 0,
    },
    activities: [],
  },
  {
    id: "14",
    name: "Luana J.",
    accessCode: "LJ9kL6sR",
    habits: [],
    learningMethods: learningMethods.map((method) => ({
      method,
      sessionsThisWeek: 0,
      totalSessions: 0,
    })),
    rewards: {
      elixir: 0,
      gold: 0,
      level: 1,
      experiencePoints: 0,
      nextLevelXP: 100,
    },
    calendarEvents: [],
    dailyTasks: generateDailyTasks("14"),
    weeklyStats: {
      completedHabits: 0,
      completedTasks: 0,
      learningMethodsUsed: 0,
      totalPoints: 0,
    },
    activities: [],
  },
  {
    id: "15",
    name: "Luana W.",
    accessCode: "LW3xM5tP",
    habits: [],
    learningMethods: learningMethods.map((method) => ({
      method,
      sessionsThisWeek: 0,
      totalSessions: 0,
    })),
    rewards: {
      elixir: 0,
      gold: 0,
      level: 1,
      experiencePoints: 0,
      nextLevelXP: 100,
    },
    calendarEvents: [],
    dailyTasks: generateDailyTasks("15"),
    weeklyStats: {
      completedHabits: 0,
      completedTasks: 0,
      learningMethodsUsed: 0,
      totalPoints: 0,
    },
    activities: [],
  },
  {
    id: "16",
    name: "Lyann",
    accessCode: "Ly7vQ2hL",
    habits: [],
    learningMethods: learningMethods.map((method) => ({
      method,
      sessionsThisWeek: 0,
      totalSessions: 0,
    })),
    rewards: {
      elixir: 0,
      gold: 0,
      level: 1,
      experiencePoints: 0,
      nextLevelXP: 100,
    },
    calendarEvents: [],
    dailyTasks: generateDailyTasks("16"),
    weeklyStats: {
      completedHabits: 0,
      completedTasks: 0,
      learningMethodsUsed: 0,
      totalPoints: 0,
    },
    activities: [],
  },
  {
    id: "17",
    name: "Marc",
    accessCode: "Mc6nR8wK",
    habits: [],
    learningMethods: learningMethods.map((method) => ({
      method,
      sessionsThisWeek: 0,
      totalSessions: 0,
    })),
    rewards: {
      elixir: 0,
      gold: 0,
      level: 1,
      experiencePoints: 0,
      nextLevelXP: 100,
    },
    calendarEvents: [],
    dailyTasks: generateDailyTasks("17"),
    weeklyStats: {
      completedHabits: 0,
      completedTasks: 0,
      learningMethodsUsed: 0,
      totalPoints: 0,
    },
    activities: [],
  },
  {
    id: "18",
    name: "Marino",
    accessCode: "Mr4pT9mJ",
    habits: [],
    learningMethods: learningMethods.map((method) => ({
      method,
      sessionsThisWeek: 0,
      totalSessions: 0,
    })),
    rewards: {
      elixir: 0,
      gold: 0,
      level: 1,
      experiencePoints: 0,
      nextLevelXP: 100,
    },
    calendarEvents: [],
    dailyTasks: generateDailyTasks("18"),
    weeklyStats: {
      completedHabits: 0,
      completedTasks: 0,
      learningMethodsUsed: 0,
      totalPoints: 0,
    },
    activities: [],
  },
  {
    id: "19",
    name: "Rahel",
    accessCode: "Rh8xU3sM",
    habits: [],
    learningMethods: learningMethods.map((method) => ({
      method,
      sessionsThisWeek: 0,
      totalSessions: 0,
    })),
    rewards: {
      elixir: 0,
      gold: 0,
      level: 1,
      experiencePoints: 0,
      nextLevelXP: 100,
    },
    calendarEvents: [],
    dailyTasks: generateDailyTasks("19"),
    weeklyStats: {
      completedHabits: 0,
      completedTasks: 0,
      learningMethodsUsed: 0,
      totalPoints: 0,
    },
    activities: [],
  },
  {
    id: "20",
    name: "Sarina",
    accessCode: "Sr5vL7nQ",
    habits: [],
    learningMethods: learningMethods.map((method) => ({
      method,
      sessionsThisWeek: 0,
      totalSessions: 0,
    })),
    rewards: {
      elixir: 0,
      gold: 0,
      level: 1,
      experiencePoints: 0,
      nextLevelXP: 100,
    },
    calendarEvents: [],
    dailyTasks: generateDailyTasks("20"),
    weeklyStats: {
      completedHabits: 0,
      completedTasks: 0,
      learningMethodsUsed: 0,
      totalPoints: 0,
    },
    activities: [],
  },
  {
    id: "21",
    name: "Sonja",
    accessCode: "Sj2kM6tR",
    habits: [],
    learningMethods: learningMethods.map((method) => ({
      method,
      sessionsThisWeek: 0,
      totalSessions: 0,
    })),
    rewards: {
      elixir: 0,
      gold: 0,
      level: 1,
      experiencePoints: 0,
      nextLevelXP: 100,
    },
    calendarEvents: [],
    dailyTasks: generateDailyTasks("21"),
    weeklyStats: {
      completedHabits: 0,
      completedTasks: 0,
      learningMethodsUsed: 0,
      totalPoints: 0,
    },
    activities: [],
  },
  {
    id: "22",
    name: "Sora",
    accessCode: "So9xQ4wP",
    habits: [],
    learningMethods: learningMethods.map((method) => ({
      method,
      sessionsThisWeek: 0,
      totalSessions: 0,
    })),
    rewards: {
      elixir: 0,
      gold: 0,
      level: 1,
      experiencePoints: 0,
      nextLevelXP: 100,
    },
    calendarEvents: [],
    dailyTasks: generateDailyTasks("22"),
    weeklyStats: {
      completedHabits: 0,
      completedTasks: 0,
      learningMethodsUsed: 0,
      totalPoints: 0,
    },
    activities: [],
  },
  {
    id: "23",
    name: "Lisa",
    accessCode: "Li8nK2mQ", // Neuer Code
    habits: [],
    learningMethods: learningMethods.map((method) => ({
      method,
      sessionsThisWeek: 0,
      totalSessions: 0,
    })),
    rewards: {
      elixir: 0,
      gold: 0,
      level: 1,
      experiencePoints: 0,
      nextLevelXP: 100,
    },
    calendarEvents: [],
    dailyTasks: generateDailyTasks("23"),
    weeklyStats: {
      completedHabits: 0,
      completedTasks: 0,
      learningMethodsUsed: 0,
      totalPoints: 0,
    },
    activities: [],
  },
  {
    id: "24",
    name: "Marco",
    accessCode: "Ma9xR4tL", // Neuer Code
    habits: [],
    learningMethods: learningMethods.map((method) => ({
      method,
      sessionsThisWeek: 0,
      totalSessions: 0,
    })),
    rewards: {
      elixir: 0,
      gold: 0,
      level: 1,
      experiencePoints: 0,
      nextLevelXP: 100,
    },
    calendarEvents: [],
    dailyTasks: generateDailyTasks("24"),
    weeklyStats: {
      completedHabits: 0,
      completedTasks: 0,
      learningMethodsUsed: 0,
      totalPoints: 0,
    },
    activities: [],
  },
  {
    id: "25",
    name: "Xenia",
    accessCode: "Xe7pM3nK", // Neuer Code
    habits: [],
    learningMethods: learningMethods.map((method) => ({
      method,
      sessionsThisWeek: 0,
      totalSessions: 0,
    })),
    rewards: {
      elixir: 0,
      gold: 0,
      level: 1,
      experiencePoints: 0,
      nextLevelXP: 100,
    },
    calendarEvents: [],
    dailyTasks: generateDailyTasks("25"),
    weeklyStats: {
      completedHabits: 0,
      completedTasks: 0,
      learningMethodsUsed: 0,
      totalPoints: 0,
    },
    activities: [],
  },
]

export default function PasApasApp() {
  // LocalStorage für persistente Datenspeicherung mit verbesserter Sicherheit
  const [students, setStudents, studentsStorage] = useLocalStorage<Student[]>("pasapas-students", initialStudents)
  const [currentUser, setCurrentUser, userStorage] = useLocalStorage<User | null>("pasapas-current-user", null)
  const [chatMessages, setChatMessages, chatStorage] = useLocalStorage<ChatMessage[]>("pasapas-chat", [])

  // Auto-save Indikator
  const [lastSaved, setLastSaved] = useState<Date | null>(null)

  // Debugging und Recovery System - only run once when loaded
  useEffect(() => {
    if (!studentsStorage.isLoaded) return

    console.log(`📊 Current students count: ${students.length}`)

    // Check if we lost data (only 1 student when we should have more)
    if (students.length === 1 && typeof window !== "undefined") {
      const lastSaved = window.localStorage.getItem("pasapas-students_lastSaved")
      const backup = window.localStorage.getItem("pasapas-students_backup")

      console.log("🔍 Checking for data loss...")
      console.log("Last saved:", lastSaved)
      console.log("Backup available:", !!backup)

      if (backup) {
        try {
          const backupData = JSON.parse(backup)
          if (backupData.length > 1) {
            console.log("🚨 Data loss detected! Attempting recovery...")
            if (studentsStorage.recoverFromBackup()) {
              alert(
                "⚠️ Datenverlust erkannt und wiederhergestellt! Ihre Schüler wurden aus dem Backup wiederhergestellt.",
              )
            }
          }
        } catch (error) {
          console.error("Error checking backup:", error)
        }
      }
    }
  }, [studentsStorage.isLoaded]) // Only depend on isLoaded

  // Migration für neue sichere Zugangscodes
  useEffect(() => {
    if (!studentsStorage.isLoaded) return

    // Prüfe ob Migration nötig ist (alte einfache Codes erkennen)
    const needsMigration = students.some(
      (student) => student.accessCode.includes("123") || student.accessCode.length < 8,
    )

    if (needsMigration) {
      console.log("🔄 Migriere zu sicheren Zugangscodes...")

      const secureCodeMapping = {
        anna123: "AS7k9mP2",
        anouk123: "An8xQ4vL",
        ayleen123: "Ay5nR9wM",
        can123: "Cn3pT7sK",
        cyril123: "Cy6mU2hJ",
        diego123: "Dg4vB8nQ",
        eliasb123: "EB9xL5tR",
        eliasz123: "EZ2kM7wP",
        frida123: "Fr6nQ3sL",
        giorgio123: "Gg8vT4mK",
        jael123: "Jl5xR9hJ",
        janina123: "Jn7pU2wM",
        liviob123: "LB4mT8nQ",
        luanaj123: "LJ9kL6sR",
        luanaw123: "LW3xM5tP",
        lyann123: "Ly7vQ2hL",
        marc123: "Mc6nR8wK",
        marino123: "Mr4pT9mJ",
        rahel123: "Rh8xU3sM",
        sarina123: "Sr5vL7nQ",
        sonja123: "Sj2kM6tR",
        sora123: "So9xQ4wP",
      }

      const updatedStudents = students.map((student) => {
        const newCode = secureCodeMapping[student.accessCode as keyof typeof secureCodeMapping]
        if (newCode) {
          return { ...student, accessCode: newCode }
        }
        return student
      })

      setStudents(updatedStudents)
      alert("🔐 Zugangscodes wurden auf sichere Versionen aktualisiert!")

      // Zeige die neuen Codes an
      const codesList = updatedStudents.map((s) => `${s.name}: ${s.accessCode}`).join("\n")
      console.log("Neue Zugangscodes:\n", codesList)
    }
  }, [studentsStorage.isLoaded, students.length]) // Abhängig von isLoaded und students.length

  // Auto-save mit verbesserter Sicherheit - separate effect
  useEffect(() => {
    if (studentsStorage.isLoaded && students.length > 0) {
      setLastSaved(new Date())

      // Additional safety: Save to multiple keys
      if (typeof window !== "undefined") {
        window.localStorage.setItem("pasapas-students-safe", JSON.stringify(students))
        window.localStorage.setItem("pasapas-students-timestamp", new Date().toISOString())
      }
    }
  }, [students, studentsStorage.isLoaded])

  // Nach dem useEffect für Auto-save hinzufügen
  useEffect(() => {
    if (studentsStorage.isLoaded) {
      resetDailyHabits()
    }
  }, [studentsStorage.isLoaded])

  // Manual backup function
  const createManualBackup = () => {
    if (typeof window !== "undefined") {
      const backupData = {
        students,
        chatMessages,
        timestamp: new Date().toISOString(),
        version: "1.1",
      }

      const dataStr = JSON.stringify(backupData, null, 2)
      const dataBlob = new Blob([dataStr], { type: "application/json" })

      const link = document.createElement("a")
      link.href = URL.createObjectURL(dataBlob)
      link.download = `PasApas_Manual_Backup_${new Date().toISOString().split("T")[0]}.json`
      link.click()

      alert("✅ Manuelles Backup erstellt und heruntergeladen!")
    }
  }

  // Recovery function for emergency
  const emergencyRecovery = () => {
    if (typeof window !== "undefined") {
      const safeData = window.localStorage.getItem("pasapas-students-safe")
      const backupData = window.localStorage.getItem("pasapas-students_backup")

      let recovered = false

      if (safeData) {
        try {
          const parsedSafe = JSON.parse(safeData)
          if (parsedSafe.length > students.length) {
            setStudents(parsedSafe)
            recovered = true
            alert("🔄 Daten aus Sicherheitskopie wiederhergestellt!")
          }
        } catch (error) {
          console.error("Error with safe data:", error)
        }
      }

      if (!recovered && backupData) {
        try {
          const parsedBackup = JSON.parse(backupData)
          if (parsedBackup.length > students.length) {
            setStudents(parsedBackup)
            recovered = true
            alert("🔄 Daten aus Backup wiederhergestellt!")
          }
        } catch (error) {
          console.error("Error with backup data:", error)
        }
      }

      if (!recovered) {
        alert("❌ Keine Wiederherstellung möglich. Bitte kontaktieren Sie den Support.")
      }
    }
  }

  // Funktion zum täglichen Reset der Habits - nach der generateAccessCode Funktion hinzufügen
  const resetDailyHabits = () => {
    const today = new Date().toDateString()
    const lastResetDate = localStorage.getItem("pasapas-last-habit-reset")

    if (lastResetDate !== today) {
      setStudents((prevStudents) =>
        prevStudents.map((student) => ({
          ...student,
          habits: student.habits.map((habit) => ({
            ...habit,
            completedToday: false,
          })),
        })),
      )
      localStorage.setItem("pasapas-last-habit-reset", today)
    }
  }

  // Temporäre States
  const [bulkStudentNames, setBulkStudentNames] = useState("")
  const [showBulkImport, setShowBulkImport] = useState(false)
  const [loginForm, setLoginForm] = useState({ name: "", accessCode: "", userType: "student" as "teacher" | "student" })
  const [selectedStudent, setSelectedStudent] = useState<string>("")
  const [newStudentName, setNewStudentName] = useState("")
  const [newHabit, setNewHabit] = useState({
    name: "",
    type: "good" as "good" | "bad",
    obvious: "",
    attractive: "",
    easy: "",
    satisfying: "",
    invisible: "",
    unattractive: "",
    difficult: "",
    unsatisfying: "",
    cue: "",
    craving: "",
    response: "",
    reward: "",
  })

  const [showKeywordDialog, setShowKeywordDialog] = useState(false)
  const [currentVerification, setCurrentVerification] = useState<{
    type: "learning" | "task"
    id: string
    title: string
    description: string
    requiredKeywords: string[]
  } | null>(null)

  const generateAccessCode = () => {
    const chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789"
    let result = ""
    for (let i = 0; i < 8; i++) {
      result += chars.charAt(Math.floor(Math.random() * chars.length))
    }
    return result
  }

  // Funktion zum täglichen Reset der Habits - nach der generateAccessCode Funktion hinzufügen
  // const resetDailyHabits = () => {
  //   const today = new Date().toDateString()
  //   const lastResetDate = localStorage.getItem('pasapas-last-habit-reset')

  //   if (lastResetDate !== today) {
  //     setStudents(prevStudents =>
  //       prevStudents.map(student => ({
  //         ...student,
  //         habits: student.habits.map(habit => ({
  //           ...habit,
  //           completedToday: false
  //         }))
  //       }))
  //     )
  //     localStorage.setItem('pasapas-last-habit-reset', today)
  //   }
  // }

  const calculateRewards = (action: "habit" | "learning" | "newHabit" | "streak" | "task" | "groupLearning") => {
    switch (action) {
      case "habit":
        return { elixir: 2, gold: 15, xp: 20 } // Mehr Gold für Habits
      case "learning":
        return { elixir: 5, gold: 2, xp: 15 } // Mehr Elixir für Lernmethoden
      case "task":
        return { elixir: 8, gold: 5, xp: 25 } // Mehr Elixir für Tasks
      case "groupLearning":
        return { elixir: 3, gold: 1, xp: 10 } // Für Gruppenlernaktivitäten
      case "newHabit":
        return { elixir: 5, gold: 25, xp: 50 } // Mehr Gold für neue Habits
      case "streak":
        return { elixir: 15, gold: 35, xp: 100 } // Ausgewogen für Streaks
      default:
        return { elixir: 0, gold: 0, xp: 0 }
    }
  }

  const updateStudentRewards = (studentId: string, action: "habit" | "learning" | "newHabit" | "streak" | "groupLearning") => {
    // Diese Funktion wird jetzt direkt in den anderen Funktionen behandelt
    console.log("updateStudentRewards called for:", studentId, action)
  }

  const handleLogin = () => {
    console.log("🔍 Login attempt:", loginForm)
    console.log(
      "🔍 Available students:",
      students.map((s) => ({
        name: s.name,
        code: s.accessCode,
        nameLength: s.name.length,
        codeLength: s.accessCode.length,
      })),
    )

    if (loginForm.userType === "teacher" && loginForm.accessCode === "lehrer2024") {
      setCurrentUser({ id: "teacher", name: "Lehrer", type: "teacher" })
    } else if (loginForm.userType === "student") {
      // Exakte Suche ohne Trimming für besseres Debugging
      console.log("🔍 Searching for:")
      console.log("  - Name entered:", `"${loginForm.name}"`)
      console.log("  - Code entered:", `"${loginForm.accessCode}"`)

      const student = students.find((s) => {
        const nameMatch = s.name.toLowerCase() === loginForm.name.toLowerCase()
        const codeMatch = s.accessCode === loginForm.accessCode

        console.log(`🔍 Checking ${s.name}:`)
        console.log(`  - Name match: ${nameMatch} ("${s.name.toLowerCase()}" vs "${loginForm.name.toLowerCase()}")`)
        console.log(`  - Code match: ${codeMatch} ("${s.accessCode}" vs "${loginForm.accessCode}")`)

        return nameMatch && codeMatch
      })

      console.log("🔍 Found student:", student)

      if (student) {
        setCurrentUser({ id: student.id, name: student.name, type: "student" })
      } else {
        console.log("❌ No matching student found")

        // Zeige alle möglichen Matches
        const nameMatches = students.filter((s) => s.name.toLowerCase() === loginForm.name.toLowerCase())
        const codeMatches = students.filter((s) => s.accessCode === loginForm.accessCode)

        console.log(
          "🔍 Students with matching name:",
          nameMatches.map((s) => s.name),
        )
        console.log(
          "🔍 Students with matching code:",
          codeMatches.map((s) => s.name),
        )

        alert(
          `Ungültiger Name oder Zugangscode!\n\nEingegeben:\nName: "${loginForm.name}"\nCode: "${loginForm.accessCode}"\n\nBitte überprüfe die Schreibweise.`,
        )
      }
    }
  }

  const handleLogout = () => {
    setCurrentUser(null)
    setLoginForm({ name: "", accessCode: "", userType: "student" })
  }

  const addStudent = () => {
    if (newStudentName.trim()) {
      const accessCode = generateAccessCode()
      const newStudent: Student = {
          id: Date.now().toString(),
          name: newStudentName,
          accessCode: accessCode,
          habits: [],
          learningMethods: learningMethods.map((method) => ({
            method,
            sessionsThisWeek: 0,
            totalSessions: 0,
          })),
          rewards: {
            elixir: 0,
            gold: 0,
            level: 1,
            experiencePoints: 0,
            nextLevelXP: 100,
          },
          calendarEvents: [],
          dailyTasks: generateDailyTasks(Date.now().toString()),
          weeklyStats: {
            completedHabits: 0,
            completedTasks: 0,
            learningMethodsUsed: 0,
            totalPoints: 0,
          },
          activities: [],
        }
      setStudents([...students, newStudent])
      setNewStudentName("")
      alert(`Schüler hinzugefügt! Zugangscode: ${accessCode}`)
    }
  }

  const addStudentsBulk = () => {
    const names = bulkStudentNames
      .split("\n")
      .map((name) => name.trim())
      .filter((name) => name.length > 0)

    if (names.length === 0) return

    const newStudents = names.map((name) => {
      const accessCode = generateAccessCode()
      const id = Date.now().toString() + Math.random().toString(36).substr(2, 9)
      return {
        id: id,
        name: name,
        accessCode: accessCode,
        habits: [],
        learningMethods: learningMethods.map((method) => ({
          method,
          sessionsThisWeek: 0,
          totalSessions: 0,
        })),
        rewards: {
          elixir: 0,
          gold: 0,
          level: 1,
          experiencePoints: 0,
          nextLevelXP: 100,
        },
        calendarEvents: [],
        dailyTasks: generateDailyTasks(id),
        weeklyStats: {
          completedHabits: 0,
          completedTasks: 0,
          learningMethodsUsed: 0,
          totalPoints: 0,
        },
        activities: [],
      }
    })

    setStudents([...students, ...newStudents])
    setBulkStudentNames("")
    setShowBulkImport(false)

    const accessCodesList = newStudents.map((s) => `${s.name}: ${s.accessCode}`).join("\n")

    const element = document.createElement("a")
    const file = new Blob([accessCodesList], { type: "text/plain" })
    element.href = URL.createObjectURL(file)
    element.download = "PasApas_Schüler_Zugangscodes.txt"
    document.body.appendChild(element)
    element.click()
    document.body.removeChild(element)

    alert(`${newStudents.length} Schüler hinzugefügt! Die Zugangscodes wurden als Datei heruntergeladen.`)
  }

  const exportAccessCodes = () => {
    const accessCodesList = students.map((s) => `${s.name}: ${s.accessCode}`).join("\n")

    const element = document.createElement("a")
    const file = new Blob([accessCodesList], { type: "text/plain" })
    element.href = URL.createObjectURL(file)
    element.download = "PasApas_Alle_Schüler_Zugangscodes.txt"
    document.body.appendChild(element)
    element.click()
    document.body.removeChild(element)
  }

  const exportAllData = () => {
    const dataToExport = {
      students,
      exportDate: new Date().toISOString(),
      version: "1.0",
    }

    const element = document.createElement("a")
    const file = new Blob([JSON.stringify(dataToExport, null, 2)], { type: "application/json" })
    element.href = URL.createObjectURL(file)
    element.download = `PasApas_Backup_${new Date().toISOString().split("T")[0]}.json`
    document.body.appendChild(element)
    element.click()
    document.body.removeChild(element)

    alert("Alle Daten wurden erfolgreich exportiert!")
  }

  const addGewohnheit = () => {
    const targetStudentId = currentUser?.type === "student" ? currentUser.id : selectedStudent

    console.log("🔍 Debug addGewohnheit:")
    console.log("- currentUser:", currentUser)
    console.log("- selectedStudent:", selectedStudent)
    console.log("- targetStudentId:", targetStudentId)
    console.log("- newHabit.name:", newHabit.name)

    if (!targetStudentId) {
      alert("❌ Bitte wähle einen Schüler aus!")
      return
    }

    if (!newHabit.name.trim()) {
      alert("❌ Bitte gib einen Habit-Namen ein!")
      return
    }

    const gewohnheit: Gewohnheit = {
      id: Date.now().toString() + Math.random().toString(36).substr(2, 9),
      name: newHabit.name,
      type: newHabit.type,
      streak: 0,
      completedToday: false,
      cue: newHabit.cue,
      craving: newHabit.craving,
      response: newHabit.response,
      reward: newHabit.reward,
      ...(newHabit.type === "good"
        ? {
            obvious: newHabit.obvious,
            attractive: newHabit.attractive,
            easy: newHabit.easy,
            satisfying: newHabit.satisfying,
          }
        : {
            invisible: newHabit.invisible,
            unattractive: newHabit.unattractive,
            difficult: newHabit.difficult,
            unsatisfying: newHabit.unsatisfying,
          }),
    }

    console.log("✅ Erstelle Gewohnheit:", gewohnheit)

    // Verwende die funktionale Form von setStudents für bessere State-Updates
    setStudents((prevStudents) => {
      console.log("📊 Previous students:", prevStudents.length)

      const updatedStudents = prevStudents.map((student) => {
        if (student.id === targetStudentId) {
          const newXP = student.rewards.experiencePoints + 50
          const newLevel = Math.floor(newXP / 100) + 1
          const nextLevelXP = newLevel * 100

          const updatedStudent = {
            ...student,
            habits: [...student.habits, gewohnheit],
            rewards: {
              elixir: student.rewards.elixir + 5,
              gold: student.rewards.gold + 25,
              level: newLevel,
              experiencePoints: newXP,
              nextLevelXP: nextLevelXP,
            },
            activities: [
              ...student.activities,
              {
                date: new Date().toISOString(),
                type: "habit" as const,
                points: 50,
                name: `Neues Habit erstellt: ${gewohnheit.name}`,
              },
            ],
          }
          console.log(`✅ Updated student ${student.name}:`, updatedStudent)
          return updatedStudent
        }
        return student
      })

      console.log("📊 All updated students:", updatedStudents.length)
      return updatedStudents
    })

    // Form zurücksetzen
    setNewHabit({
      name: "",
      type: "good",
      obvious: "",
      attractive: "",
      easy: "",
      satisfying: "",
      invisible: "",
      unattractive: "",
      difficult: "",
      unsatisfying: "",
      cue: "",
      craving: "",
      response: "",
      reward: "",
    })

    alert("🎉 Neues Habit erstellt! +5 Elixir, +25 Gold, +50 XP erhalten!")
  }

  const debugCurrentState = () => {
    console.log("🔍 Current State Debug:")
    console.log("- Students count:", students.length)
    console.log(
      "- Students:",
      students.map((s) => ({ id: s.id, name: s.name, habitsCount: s.habits.length })),
    )
    console.log("- Current user:", currentUser)
    console.log("- Selected student:", selectedStudent)

    if (currentUser?.type === "student") {
      const currentStudent = students.find((s) => s.id === currentUser.id)
      console.log("- Current student habits:", currentStudent?.habits || [])
    }

    if (selectedStudent) {
      const selectedStudentData = students.find((s) => s.id === selectedStudent)
      console.log("- Selected student habits:", selectedStudentData?.habits || [])
    }
  }

  const completeDailyTask = (studentId: string, taskId: string, keywords: string[]) => {
    setStudents((prevStudents) => {
      return prevStudents.map((student) => {
        if (student.id === studentId) {
          // Ensure dailyTasks exists
          if (!student.dailyTasks || !Array.isArray(student.dailyTasks)) {
            student.dailyTasks = generateDailyTasks(studentId)
          }

          const task = student.dailyTasks.find((t) => t.id === taskId)
          if (!task || task.completed) return student

          const taskRewards = calculateRewards("task")
          const newXP = student.rewards.experiencePoints + taskRewards.xp
          const newLevel = Math.floor(newXP / 100) + 1
          const nextLevelXP = newLevel * 100

          const updatedStudent = {
            ...student,
            dailyTasks: student.dailyTasks.map((t) =>
              t.id === taskId
                ? { ...t, completed: true, completionKeywords: keywords, completedAt: new Date().toISOString() }
                : t,
            ),
            weeklyStats: {
              ...student.weeklyStats,
              completedTasks: student.weeklyStats.completedTasks + 1,
              totalPoints: student.weeklyStats.totalPoints + taskRewards.xp,
            },
            rewards: {
              elixir: student.rewards.elixir + taskRewards.elixir,
              gold: student.rewards.gold + taskRewards.gold,
              level: newLevel,
              experiencePoints: newXP,
              nextLevelXP: nextLevelXP,
            },
            activities: [
              ...student.activities,
              {
                date: new Date().toISOString(),
                type: "task" as const,
                points: taskRewards.xp,
                name: task.title,
              },
            ],
          }

          // Check if all daily tasks completed for bonus
          const completedTasksCount = updatedStudent.dailyTasks.filter((t) => t.completed).length
          if (completedTasksCount === 3) {
            const bonusRewards = { elixir: 20, gold: 10, xp: 75 }
            const finalXP = updatedStudent.rewards.experiencePoints + bonusRewards.xp
            const finalLevel = Math.floor(finalXP / 100) + 1
            const finalNextLevelXP = finalLevel * 100

            setTimeout(() => {
              alert("🎉 Alle Daily Tasks erledigt! Bonus: +20 Elixir, +10 Gold, +75 XP!")
            }, 100)

            return {
              ...updatedStudent,
              rewards: {
                ...updatedStudent.rewards,
                elixir: updatedStudent.rewards.elixir + bonusRewards.elixir,
                gold: updatedStudent.rewards.gold + bonusRewards.gold,
                level: finalLevel,
                experiencePoints: finalXP,
                nextLevelXP: finalNextLevelXP,
              },
            }
          } else {
            setTimeout(() => {
              alert(
                `✅ Daily Task erledigt! +${taskRewards.elixir} Elixir, +${taskRewards.gold} Gold, +${taskRewards.xp} XP erhalten!`,
              )
            }, 100)
          }

          return updatedStudent
        }
        return student
      })
    })
  }

  const resetDailyTasks = (studentId: string) => {
    setStudents(
      students.map((student) =>
        student.id === studentId ? { ...student, dailyTasks: generateDailyTasks(studentId) } : student,
      ),
    )
  }

  const toggleHabitCompletion = (studentId: string, habitId: string) => {
    setStudents((prevStudents) => {
      return prevStudents.map((student) => {
        if (student.id === studentId) {
          const habit = student.habits.find((h) => h.id === habitId)
          if (!habit) return student

          const wasCompleted = habit.completedToday
          const newCompleted = !wasCompleted

          // Berechne neue Belohnungen nur wenn Habit abgeschlossen wird
          let newRewards = student.rewards
          let newActivities = student.activities
          let newWeeklyStats = student.weeklyStats

          if (newCompleted && !wasCompleted) {
            // Habit wird abgeschlossen
            const habitRewards = calculateRewards("habit")
            const newXP = student.rewards.experiencePoints + habitRewards.xp
            const newLevel = Math.floor(newXP / 100) + 1
            const nextLevelXP = newLevel * 100

            newRewards = {
              elixir: student.rewards.elixir + habitRewards.elixir,
              gold: student.rewards.gold + habitRewards.gold,
              level: newLevel,
              experiencePoints: newXP,
              nextLevelXP: nextLevelXP,
            }

            newActivities = [
              ...student.activities,
              {
                date: new Date().toISOString(),
                type: "habit" as const,
                points: habitRewards.xp,
                name: habit.name,
              },
            ]

            newWeeklyStats = {
              ...student.weeklyStats,
              completedHabits: student.weeklyStats.completedHabits + 1,
              totalPoints: student.weeklyStats.totalPoints + habitRewards.xp,
            }

            // Check for streak bonus
            const newStreak = habit.streak + 1
            if (newStreak % 7 === 0) {
              const streakRewards = calculateRewards("streak")
              newRewards = {
                ...newRewards,
                elixir: newRewards.elixir + streakRewards.elixir,
                gold: newRewards.gold + streakRewards.gold,
                experiencePoints: newRewards.experiencePoints + streakRewards.xp,
              }

              setTimeout(() => {
                alert(
                  `🔥 7-Tage Streak erreicht! Bonus: +${streakRewards.elixir} Elixir, +${streakRewards.gold} Gold, +${streakRewards.xp} XP!`,
                )
              }, 100)
            } else {
              setTimeout(() => {
                alert(
                  `✅ Habit abgeschlossen! +${habitRewards.elixir} Elixir, +${habitRewards.gold} Gold, +${habitRewards.xp} XP erhalten!`,
                )
              }, 100)
            }
          }

          return {
            ...student,
            habits: student.habits.map((h) =>
              h.id === habitId
                ? {
                    ...h,
                    completedToday: newCompleted,
                    streak: newCompleted ? h.streak + 1 : Math.max(0, h.streak - 1),
                  }
                : h,
            ),
            rewards: newRewards,
            activities: newActivities,
            weeklyStats: newWeeklyStats,
          }
        }
        return student
      })
    })
  }

  const updateLearningMethod = (studentId: string, method: string) => {
    setStudents(
      students.map((student) =>
        student.id === studentId
          ? {
              ...student,
              learningMethods: student.learningMethods.map((lm) =>
                lm.method === method
                  ? {
                      ...lm,
                      sessionsThisWeek: lm.sessionsThisWeek + 1,
                      totalSessions: lm.totalSessions + 1,
                      lastUsed: new Date().toLocaleDateString("de-DE"),
                    }
                  : lm,
              ),
            }
          : student,
      ),
    )

    // Belohnung für Lernmethode
    updateStudentRewards(studentId, "learning")
    addActivity(studentId, "learning", 10, method)
    alert("📚 Lernmethode verwendet! +5 Elixir, +2 Gold, +15 XP erhalten!")
  }

  const handleLearningMethodUse = (studentId: string, method: string, description: string) => {
    setStudents((prevStudents) => {
      return prevStudents.map((student) => {
        if (student.id === studentId) {
          // Level-Überprüfung
          const requiredLevel = getLearningMethodRequiredLevel(method)
          if (student.rewards.level < requiredLevel) {
            setTimeout(() => {
              alert(`❌ Level ${requiredLevel} erforderlich für "${method}"! Aktuelles Level: ${student.rewards.level}`)
            }, 100)
            return student
          }

          const learningRewards = calculateRewards("learning")
          const newXP = student.rewards.experiencePoints + learningRewards.xp
          const newLevel = Math.floor(newXP / 100) + 1
          const nextLevelXP = newLevel * 100

          setTimeout(() => {
            alert(
              `📚 Lernmethode angewendet! +${learningRewards.elixir} Elixir, +${learningRewards.gold} Gold, +${learningRewards.xp} XP erhalten!`,
            )
          }, 100)

          return {
            ...student,
            learningMethods: student.learningMethods.map((lm) =>
              lm.method === method
                ? {
                    ...lm,
                    sessionsThisWeek: lm.sessionsThisWeek + 1,
                    totalSessions: lm.totalSessions + 1,
                    lastUsed: new Date().toLocaleDateString("de-DE"),
                  }
                : lm,
            ),
            weeklyStats: {
              ...student.weeklyStats,
              learningMethodsUsed: student.weeklyStats.learningMethodsUsed + 1,
              totalPoints: student.weeklyStats.totalPoints + learningRewards.xp,
            },
            rewards: {
              elixir: student.rewards.elixir + learningRewards.elixir,
              gold: student.rewards.gold + learningRewards.gold,
              level: newLevel,
              experiencePoints: newXP,
              nextLevelXP: nextLevelXP,
            },
            activities: [
              ...student.activities,
              {
                date: new Date().toISOString(),
                type: "learning" as const,
                points: learningRewards.xp,
                name: `${method}: ${description}`,
              },
            ],
          }
        }
        return student
      })
    })
  }

  const handleGroupLearning = (participantIds: string[], description: string, method: string) => {
    // Überprüfe ob alle Teilnehmer das erforderliche Level haben
    const requiredLevel = getLearningMethodRequiredLevel(method)
    const invalidParticipants = participantIds.filter((id) => {
      const student = students.find((s) => s.id === id)
      return !student || student.rewards.level < requiredLevel
    })

    if (invalidParticipants.length > 0) {
      const invalidNames = invalidParticipants
        .map((id) => students.find((s) => s.id === id)?.name || "Unbekannt")
        .join(", ")
      alert(
        `❌ Folgende Teilnehmer haben nicht das erforderliche Level ${requiredLevel} für "${method}": ${invalidNames}`,
      )
      return
    }

    // Belohne alle Teilnehmer
    participantIds.forEach((studentId) => {
      updateStudentRewards(studentId, "groupLearning")
      addActivity(studentId, "learning", 10, `Gruppenlernaktivität: ${method}`)

      // Update learning method stats
      setStudents((prev) =>
        prev.map((student) =>
          student.id === studentId
            ? {
                ...student,
                learningMethods: student.learningMethods.map((lm) =>
                  lm.method === method
                    ? {
                        ...lm,
                        sessionsThisWeek: lm.sessionsThisWeek + 1,
                        totalSessions: lm.totalSessions + 1,
                        lastUsed: new Date().toLocaleDateString("de-DE"),
                      }
                    : lm,
                ),
                weeklyStats: {
                  ...student.weeklyStats,
                  learningMethodsUsed: student.weeklyStats.learningMethodsUsed + 1,
                  totalPoints: student.weeklyStats.totalPoints + 10,
                },
              }
            : student,
        ),
      )
    })

    const participantNames = participantIds
      .map((id) => students.find((s) => s.id === id)?.name)
      .filter(Boolean)
      .join(", ")

    alert(
      `🎉 Gruppenlernaktivität erfolgreich! Alle Teilnehmer (${participantNames}) erhalten +3 Elixir, +1 Gold, +10 XP!`,
    )
  }

  const handleLearningMethodWithKeywords = (studentId: string, method: string) => {
    const requiredKeywords = {
      "Active Retrieval": ["abrufen", "gedächtnis", "ohne", "hilfsmittel", "erinnern"],
      Flashcards: ["karten", "wiederholen", "fragen", "antworten", "lernen"],
      "Feynman-Methode": ["erklären", "einfach", "verstehen", "konzept", "lehren"],
      "Blurting/Brain Dumping": ["schreiben", "alles", "gedanken", "papier", "brainstorm"],
      Reasoning: ["warum", "zusammenhang", "logik", "verstehen", "begründen"],
      Mnemotechniken: ["merkhilfe", "eselsbrücke", "gedächtnis", "trick", "einprägen"],
      "SQ3R Methode": ["survey", "question", "read", "recite", "review"],
      Teaching: ["erklären", "lehren", "anderen", "beibringen", "vermitteln"],
      Chunking: ["teilen", "häppchen", "chunks", "aufteilen", "gruppieren"],
    }

    setCurrentVerification({
      type: "learning",
      id: method,
      title: `${method} verwendet`,
      description: `Ich habe die Lernmethode "${method}" angewendet`,
      requiredKeywords: requiredKeywords[method as keyof typeof requiredKeywords] || [
        "lernen",
        "methode",
        "angewendet",
      ],
    })
    setShowKeywordDialog(true)
  }

  const handleKeywordVerification = (keywords: string[]) => {
    if (!currentVerification) return

    if (currentVerification.type === "learning") {
      const targetStudentId = currentUser?.type === "student" ? currentUser.id : selectedStudent
      if (targetStudentId) {
        updateLearningMethod(targetStudentId, currentVerification.id)

        // Update weekly stats
        setStudents(
          students.map((student) =>
            student.id === targetStudentId
              ? {
                  ...student,
                  weeklyStats: {
                    ...student.weeklyStats,
                    learningMethodsUsed: student.weeklyStats.learningMethodsUsed + 1,
                    totalPoints: student.weeklyStats.totalPoints + 10,
                  },
                }
              : student,
          ),
        )
      }
    }

    setCurrentVerification(null)
  }

  const getCurrentWeek = () => {
    const now = new Date()
    const startOfYear = new Date(now.getFullYear(), 0, 1)
    const days = Math.floor((now.getTime() - startOfYear.getTime()) / (24 * 60 * 60 * 1000))
    const weekNumber = Math.ceil((days + startOfYear.getDay() + 1) / 7)
    return `${now.getFullYear()}-W${weekNumber}`
  }

  const addActivity = (studentId: string, type: "habit" | "task" | "learning", points: number, name: string) => {
    setStudents(
      students.map((student) =>
        student.id === studentId
          ? {
              ...student,
              activities: [
                ...student.activities,
                {
                  date: new Date().toISOString(),
                  type,
                  points,
                  name,
                },
              ],
            }
          : student,
      ),
    )
  }

  const sendChatMessage = (message: string) => {
    const newMessage: ChatMessage = {
      id: Date.now().toString() + Math.random().toString(36).substr(2, 9),
      senderId: currentUser?.id || "",
      senderName: currentUser?.name || "",
      senderType: currentUser?.type || "student",
      message: message,
      timestamp: new Date().toISOString(),
    }

    setChatMessages([...chatMessages, newMessage])
  }

  // Kalender-Funktionen
  const addCalendarEvent = (studentId: string, event: Omit<CalendarEvent, "id">) => {
    const newEvent: CalendarEvent = {
      ...event,
      id: Date.now().toString() + Math.random().toString(36).substr(2, 9),
    }

    setStudents(
      students.map((student) =>
        student.id === studentId ? { ...student, calendarEvents: [...student.calendarEvents, newEvent] } : student,
      ),
    )
  }

  const updateCalendarEvent = (studentId: string, eventId: string, updates: Partial<CalendarEvent>) => {
    setStudents(
      students.map((student) =>
        student.id === studentId
          ? {
              ...student,
              calendarEvents: student.calendarEvents.map((event) =>
                event.id === eventId ? { ...event, ...updates } : event,
              ),
            }
          : student,
      ),
    )
  }

  const deleteCalendarEvent = (studentId: string, eventId: string) => {
    setStudents(
      students.map((student) =>
        student.id === studentId
          ? {
              ...student,
              calendarEvents: student.calendarEvents.filter((event) => event.id !== eventId),
            }
          : student,
      ),
    )
  }

  const getClassStats = () => {
    const totalHabits = students.reduce((sum, student) => sum + student.habits.length, 0)
    const completedToday = students.reduce(
      (sum, student) => sum + student.habits.filter((habit) => habit.completedToday).length,
      0,
    )
    const avgStreak =
      students.reduce(
        (sum, student) => sum + student.habits.reduce((habitSum, habit) => habitSum + habit.streak, 0),
        0,
      ) / Math.max(totalHabits, 1)

    return { totalHabits, completedToday, avgStreak: Math.round(avgStreak * 10) / 10 }
  }

  const getCurrentStudent = () => {
    if (currentUser?.type === "student") {
      return students.find((s) => s.id === currentUser.id)
    }
    return null
  }

  const handleHabitFormChange = (field: string, value: string) => {
    setNewHabit({ ...newHabit, [field]: value })
  }

  // Don't render until localStorage is loaded
  if (!studentsStorage.isLoaded) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center p-4">
        <Card className="w-full max-w-md">
          <CardContent className="flex items-center justify-center p-8">
            <div className="text-center">
              <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto mb-4"></div>
              <p className="text-gray-600">Lade Daten...</p>
            </div>
          </CardContent>
        </Card>
      </div>
    )
  }

  // Login Screen
  if (!currentUser) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center p-4">
        <Card className="w-full max-w-md">
          <CardHeader className="text-center">
            <div className="flex items-center justify-center gap-2 mb-2">
              <Target className="h-8 w-8 text-green-600" />
              <div>
                <h1 className="text-3xl font-bold text-green-600">Accroche-toi</h1>
                <p className="text-sm text-gray-500">von Aron Gees</p>
              </div>
            </div>
            <CardTitle className="text-xl">Habits & Lernmethoden Tracker</CardTitle>
            <CardDescription>Basierend auf James Clear's "Atomic Habits"</CardDescription>
            {lastSaved && (
              <div className="flex items-center justify-center gap-1 text-xs text-green-600 mt-2">
                <Save className="h-3 w-3" />
                Zuletzt gespeichert: {lastSaved.toLocaleTimeString("de-DE")}
              </div>
            )}
          </CardHeader>
          <CardContent className="space-y-4">
            <div>
              <Label>Benutzertyp</Label>
              <Select
                value={loginForm.userType}
                onValueChange={(value: "teacher" | "student") => setLoginForm({ ...loginForm, userType: value })}
              >
                <SelectTrigger>
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="student">
                    <div className="flex items-center gap-2">
                      <UserCheck className="h-4 w-4" />
                      Schüler
                    </div>
                  </SelectItem>
                  <SelectItem value="teacher">
                    <div className="flex items-center gap-2">
                      <GraduationCap className="h-4 w-4" />
                      Lehrer
                    </div>
                  </SelectItem>
                </SelectContent>
              </Select>
            </div>

            {loginForm.userType === "student" && (
              <div>
                <Label htmlFor="name">Name</Label>
                <Input
                  id="name"
                  placeholder="Dein vollständiger Name"
                  value={loginForm.name}
                  onChange={(e) => setLoginForm({ ...loginForm, name: e.target.value })}
                />
              </div>
            )}

            <div>
              <Label htmlFor="accessCode">{loginForm.userType === "teacher" ? "Lehrer-Passwort" : "Zugangscode"}</Label>
              <Input
                id="accessCode"
                type="password"
                placeholder={loginForm.userType === "teacher" ? "Lehrer-Passwort eingeben" : "Dein Zugangscode"}
                value={loginForm.accessCode}
                onChange={(e) => setLoginForm({ ...loginForm, accessCode: e.target.value })}
              />
            </div>

            <Button
              onClick={handleLogin}
              className="w-full bg-green-600 hover:bg-green-700"
              disabled={!loginForm.accessCode || (loginForm.userType === "student" && !loginForm.name)}
            >
              Anmelden
            </Button>

            {/* Debug Button */}
            <Button
              onClick={() => {
                console.log("🔍 All students debug:")
                students.forEach((s, index) => {
                  console.log(`${index + 1}. "${s.name}" -> "${s.accessCode}"`)
                })
                alert(
                  `Alle Schüler (${students.length}):\n\n${students.map((s, i) => `${i + 1}. ${s.name}: ${s.accessCode}`).join("\n")}`,
                )
              }}
              variant="outline"
              className="w-full text-xs"
            >
              🔍 Debug: Alle Zugangscodes anzeigen
            </Button>

            {loginForm.userType === "teacher" && (
              <p className="text-xs text-gray-500 text-center">Lehrer-Passwort: lehrer2024</p>
            )}
            {loginForm.userType === "student" && (
              <p className="text-xs text-gray-500 text-center">Frage deinen Lehrer nach deinem Zugangscode</p>
            )}
          </CardContent>
        </Card>
      </div>
    )
  }

  const stats = getClassStats()
  const currentStudent = getCurrentStudent()

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 p-4">
      <div className="max-w-7xl mx-auto">
        <div className="mb-8">
          <div className="flex justify-between items-center mb-4">
            <div>
              <div className="flex items-center gap-3 mb-2">
                <Target className="h-10 w-10 text-green-600" />
                <div>
                  <h1 className="text-4xl font-bold text-green-600">Accroche-toi</h1>
                  <p className="text-sm text-gray-500">von Aron Gees</p>
                </div>
              </div>
              <h2 className="text-2xl font-bold text-gray-900 mb-1">
                {currentUser.type === "teacher"
                  ? "Klassen Habits & Lernmethoden Tracker"
                  : `Mein Lernplan - ${currentUser.name}`}
              </h2>
              <p className="text-gray-600">Basierend auf James Clear's "Atomic Habits" Prinzipien</p>
              {lastSaved && (
                <div className="flex items-center gap-1 text-xs text-green-600 mt-1">
                  <Save className="h-3 w-3" />
                  Automatisch gespeichert: {lastSaved.toLocaleTimeString("de-DE")} ({students.length} Schüler)
                </div>
              )}
            </div>
            <div className="flex items-center gap-4">
              <Badge variant="outline" className="flex items-center gap-2">
                {currentUser.type === "teacher" ? (
                  <GraduationCap className="h-4 w-4" />
                ) : (
                  <UserCheck className="h-4 w-4" />
                )}
                {currentUser.name}
              </Badge>
              {currentUser.type === "teacher" && (
                <>
                  <Button variant="outline" onClick={createManualBackup}>
                    <Download className="h-4 w-4 mr-2" />
                    Backup
                  </Button>
                  <Button variant="outline" onClick={emergencyRecovery} className="text-orange-600 bg-transparent">
                    <Save className="h-4 w-4 mr-2" />
                    Recovery
                  </Button>
                </>
              )}
              <Button variant="outline" onClick={handleLogout}>
                <LogOut className="h-4 w-4 mr-2" />
                Abmelden
              </Button>
            </div>
          </div>
        </div>

        {currentUser.type === "teacher" ? (
          // Teacher View
          <Tabs defaultValue="overview" className="space-y-6">
            <TabsList className="grid w-full grid-cols-6">
              <TabsTrigger value="overview">Übersicht</TabsTrigger>
              <TabsTrigger value="students">Schüler</TabsTrigger>
              <TabsTrigger value="habits">Habits</TabsTrigger>
              <TabsTrigger value="learning">Lernmethoden</TabsTrigger>
              <TabsTrigger value="leaderboard">Leaderboard</TabsTrigger>
              <TabsTrigger value="chat">Chat</TabsTrigger>
            </TabsList>

            <TabsContent value="overview" className="space-y-6">
              <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                <Card>
                  <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                    <CardTitle className="text-sm font-medium">Gesamt Schüler</CardTitle>
                    <Users className="h-4 w-4 text-muted-foreground" />
                  </CardHeader>
                  <CardContent>
                    <div className="text-2xl font-bold">{students.length}</div>
                  </CardContent>
                </Card>

                <Card>
                  <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                    <CardTitle className="text-sm font-medium">Habits heute</CardTitle>
                    <Target className="h-4 w-4 text-muted-foreground" />
                  </CardHeader>
                  <CardContent>
                    <div className="text-2xl font-bold">
                      {stats.completedToday}/{stats.totalHabits}
                    </div>
                    <Progress value={(stats.completedToday / Math.max(stats.totalHabits, 1)) * 100} className="mt-2" />
                  </CardContent>
                </Card>

                <Card>
                  <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                    <CardTitle className="text-sm font-medium">Ø Streak</CardTitle>
                    <TrendingUp className="h-4 w-4 text-muted-foreground" />
                  </CardHeader>
                  <CardContent>
                    <div className="text-2xl font-bold">{stats.avgStreak} Tage</div>
                  </CardContent>
                </Card>
              </div>

              {/* Success Curve für alle Habits */}
              <SuccessCurve activities={students.flatMap((s) => s.activities)} />

              <Card>
                <CardHeader>
                  <CardTitle>Schüler Fortschritt</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="space-y-4">
                    {students.map((student) => {
                      const completedHabits = student.habits.filter((h) => h.completedToday).length
                      const totalHabits = student.habits.length
                      const activeMethods = student.learningMethods.filter((lm) => lm.sessionsThisWeek > 0).length
                      const upcomingEvents = student.calendarEvents.filter(
                        (event) => new Date(event.date) >= new Date(),
                      ).length

                      return (
                        <div key={student.id} className="flex items-center justify-between p-4 border rounded-lg">
                          <div>
                            <h3 className="font-medium">{student.name}</h3>
                            <p className="text-sm text-gray-600">
                              {completedHabits}/{totalHabits} Habits • {activeMethods} aktive Lernmethoden •{" "}
                              {upcomingEvents} Termine
                            </p>
                            <div className="flex items-center gap-4 mt-1">
                              <p className="text-xs text-gray-500">Zugangscode: {student.accessCode}</p>
                              <div className="flex items-center gap-2">
                                <Badge variant="outline" className="text-xs">
                                  <Zap className="h-3 w-3 mr-1" />
                                  {student.rewards.elixir}
                                </Badge>
                                <Badge variant="outline" className="text-xs">
                                  <Coins className="h-3 w-3 mr-1" />
                                  {student.rewards.gold}
                                </Badge>
                                <Badge variant="outline" className="text-xs">
                                  <Star className="h-3 w-3 mr-1" />
                                  Lv.{student.rewards.level}
                                </Badge>
                              </div>
                            </div>
                          </div>
                          <div className="flex items-center space-x-2">
                            <Progress value={(completedHabits / Math.max(totalHabits, 1)) * 100} className="w-20" />
                            <Badge variant={completedHabits === totalHabits ? "default" : "secondary"}>
                              {Math.round((completedHabits / Math.max(totalHabits, 1)) * 100)}%
                            </Badge>
                          </div>
                        </div>
                      )
                    })}
                  </div>
                </CardContent>
              </Card>
            </TabsContent>

            <TabsContent value="students" className="space-y-6">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <Card>
                  <CardHeader>
                    <CardTitle>Einzelnen Schüler hinzufügen</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="flex space-x-2">
                      <Input
                        placeholder="Name des Schülers"
                        value={newStudentName}
                        onChange={(e) => setNewStudentName(e.target.value)}
                      />
                      <Button onClick={addStudent} className="bg-green-600 hover:bg-green-700">
                        <Plus className="h-4 w-4 mr-2" />
                        Hinzufügen
                      </Button>
                    </div>
                  </CardContent>
                </Card>

                <Card>
                  <CardHeader>
                    <CardTitle>Mehrere Schüler hinzufügen</CardTitle>
                    <CardDescription>Fügen Sie mehrere Schüler auf einmal hinzu</CardDescription>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-2">
                      <Button onClick={() => setShowBulkImport(!showBulkImport)} variant="outline" className="w-full">
                        {showBulkImport ? "Bulk-Import schließen" : "Bulk-Import öffnen"}
                      </Button>
                      {showBulkImport && (
                        <div className="space-y-2">
                          <Textarea
                            placeholder="Schülernamen (einen pro Zeile)&#10;Max Mustermann&#10;Anna Schmidt&#10;Tom Weber&#10;..."
                            value={bulkStudentNames}
                            onChange={(e) => setBulkStudentNames(e.target.value)}
                            rows={6}
                          />
                          <Button
                            onClick={addStudentsBulk}
                            disabled={!bulkStudentNames.trim()}
                            className="bg-green-600 hover:bg-green-700"
                          >
                            <Users className="h-4 w-4 mr-2" />
                            Alle hinzufügen
                          </Button>
                        </div>
                      )}
                    </div>
                  </CardContent>
                </Card>
              </div>

              <Card>
                <CardHeader>
                  <div className="flex justify-between items-center">
                    <CardTitle>Schüler Übersicht ({students.length})</CardTitle>
                    <div className="flex gap-2">
                      <Button
                        onClick={() => {
                          console.log("Current students:", students)
                          alert(`Aktuelle Schüler:\n${students.map((s) => `${s.name}: ${s.accessCode}`).join("\n")}`)
                        }}
                        variant="outline"
                        size="sm"
                      >
                        Debug Codes
                      </Button>
                      <Button onClick={exportAccessCodes} variant="outline" disabled={students.length === 0}>
                        Zugangscodes exportieren
                      </Button>
                    </div>
                  </div>
                </CardHeader>
                <CardContent>
                  <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                    {students.map((student) => (
                      <Card key={student.id} className="border-2">
                        <CardHeader className="pb-3">
                          <CardTitle className="text-lg">{student.name}</CardTitle>
                          <div className="flex items-center justify-between">
                            <CardDescription>Zugangscode:</CardDescription>
                            <Badge variant="secondary" className="font-mono text-sm px-3">
                              {student.accessCode}
                            </Badge>
                          </div>
                        </CardHeader>
                        <CardContent>
                          <div className="space-y-3">
                            {/* Belohnungen */}
                            <div className="grid grid-cols-3 gap-2">
                              <div className="text-center p-2 bg-blue-50 rounded">
                                <Zap className="h-4 w-4 mx-auto text-blue-600" />
                                <div className="text-sm font-bold text-blue-700">{student.rewards.elixir}</div>
                                <div className="text-xs text-blue-600">Elixir</div>
                              </div>
                              <div className="text-center p-2 bg-yellow-50 rounded">
                                <Coins className="h-4 w-4 mx-auto text-yellow-600" />
                                <div className="text-sm font-bold text-yellow-700">{student.rewards.gold}</div>
                                <div className="text-xs text-yellow-600">Gold</div>
                              </div>
                              <div className="text-center p-2 bg-purple-50 rounded">
                                <Star className="h-4 w-4 mx-auto text-purple-600" />
                                <div className="text-sm font-bold text-purple-700">Lv.{student.rewards.level}</div>
                                <div className="text-xs text-purple-600">Level</div>
                              </div>
                            </div>

                            <div>
                              <p className="text-sm font-medium mb-1">Habits ({student.habits.length})</p>
                              <div className="space-y-1">
                                {student.habits.slice(0, 2).map((habit) => (
                                  <div key={habit.id} className="flex items-center justify-between text-sm">
                                    <span className={habit.completedToday ? "line-through text-gray-500" : ""}>
                                      {habit.name.length > 20 ? habit.name.substring(0, 20) + "..." : habit.name}
                                    </span>
                                    <Badge
                                      variant={habit.type === "good" ? "default" : "destructive"}
                                      className="text-xs"
                                    >
                                      {habit.streak}
                                    </Badge>
                                  </div>
                                ))}
                                {student.habits.length > 2 && (
                                  <p className="text-xs text-gray-500">+{student.habits.length - 2} weitere</p>
                                )}
                                {student.habits.length === 0 && (
                                  <p className="text-xs text-gray-500">Noch keine Habits</p>
                                )}
                              </div>
                            </div>

                            <div>
                              <p className="text-sm font-medium mb-1">Kommende Termine</p>
                              <div className="space-y-1">
                                {student.calendarEvents
                                  .filter((event) => new Date(event.date) >= new Date())
                                  .slice(0, 2)
                                  .map((event) => (
                                    <div key={event.id} className="flex items-center justify-between text-sm">
                                      <span className="truncate">
                                        {event.title.length > 15 ? event.title.substring(0, 15) + "..." : event.title}
                                      </span>
                                      <Badge variant="outline" className="text-xs">
                                        {new Date(event.date + "T00:00:00").toLocaleDateString("de-DE", {
                                          day: "numeric",
                                          month: "short",
                                        })}
                                      </Badge>
                                    </div>
                                  ))}
                                {student.calendarEvents.filter((event) => new Date(event.date) >= new Date()).length ===
                                  0 && <p className="text-xs text-gray-500">Keine Termine</p>}
                              </div>
                            </div>

                            <div className="pt-2 border-t">
                              <div className="flex items-center justify-between text-xs text-gray-600">
                                <span>Heute erledigt:</span>
                                <span>
                                  {student.habits.filter((h) => h.completedToday).length}/{student.habits.length}
                                </span>
                              </div>
                            </div>
                          </div>
                        </CardContent>
                      </Card>
                    ))}
                  </div>
                  {students.length === 0 && (
                    <div className="text-center py-12">
                      <Users className="h-12 w-12 text-gray-400 mx-auto mb-4" />
                      <p className="text-gray-500">Noch keine Schüler hinzugefügt</p>
                      <p className="text-gray-400 text-sm">Verwenden Sie die Optionen oben, um Schüler hinzuzufügen</p>
                    </div>
                  )}
                </CardContent>
              </Card>
            </TabsContent>

            <TabsContent value="habits" className="space-y-6">
              {/* Debug Info */}
              <Card className="bg-blue-50 border-blue-200">
                <CardHeader>
                  <CardTitle className="text-sm text-blue-800">Debug Info (Lehrer)</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="text-xs text-blue-700">
                    <p>Selected Student: {selectedStudent}</p>
                    <p>Students Count: {students.length}</p>
                    <p>New Habit: {JSON.stringify(newHabit, null, 2)}</p>
                    {selectedStudent && (
                      <p>
                        Selected Student Habits: {students.find((s) => s.id === selectedStudent)?.habits.length || 0}
                      </p>
                    )}
                  </div>
                </CardContent>
              </Card>

              <Card>
                <CardHeader>
                  <CardTitle>Neues Habit hinzufügen</CardTitle>
                  <CardDescription>
                    Basierend auf den 4 Gesetzen der Verhaltensänderung und dem Habit Loop
                  </CardDescription>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                      <Label htmlFor="student-select">Schüler auswählen</Label>
                      <Select value={selectedStudent} onValueChange={setSelectedStudent}>
                        <SelectTrigger>
                          <SelectValue placeholder="Schüler wählen" />
                        </SelectTrigger>
                        <SelectContent>
                          {students.map((student) => (
                            <SelectItem key={student.id} value={student.id}>
                              {student.name}
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                    </div>

                    <div>
                      <Label htmlFor="habit-type">Habit-Typ</Label>
                      <Select
                        value={newHabit.type}
                        onValueChange={(value: "good" | "bad") => setNewHabit({ ...newHabit, type: value })}
                      >
                        <SelectTrigger>
                          <SelectValue />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="good">Gutes Habit</SelectItem>
                          <SelectItem value="bad">Schlechtes Habit</SelectItem>
                        </SelectContent>
                      </Select>
                    </div>
                  </div>

                  <div>
                    <Label htmlFor="habit-name">Habit Name</Label>
                    <Input
                      id="habit-name"
                      placeholder="z.B. Täglich 30 Minuten lesen"
                      value={newHabit.name}
                      onChange={(e) => setNewHabit({ ...newHabit, name: e.target.value })}
                    />
                  </div>

                  <HabitLoopForm habitType={newHabit.type} values={newHabit} onChange={handleHabitFormChange} />

                  <Button
                    onClick={addGewohnheit}
                    disabled={!selectedStudent || !newHabit.name.trim()}
                    className="bg-green-600 hover:bg-green-700"
                  >
                    <Plus className="h-4 w-4 mr-2" />
                    Habit hinzufügen (+5 Elixir, +25 Gold, +50 XP)
                  </Button>
                </CardContent>
              </Card>

              <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                {students.map((student) => (
                  <Card key={student.id}>
                    <CardHeader>
                      <CardTitle className="flex items-center justify-between">
                        <span>{student.name} - Habits</span>
                        <div className="flex items-center gap-2">
                          <Badge variant="outline" className="text-xs">
                            <Zap className="h-3 w-3 mr-1" />
                            {student.rewards.elixir}
                          </Badge>
                          <Badge variant="outline" className="text-xs">
                            <Coins className="h-3 w-3 mr-1" />
                            {student.rewards.gold}
                          </Badge>
                        </div>
                      </CardTitle>
                    </CardHeader>
                    <CardContent>
                      <div className="space-y-3">
                        {student.habits.map((habit) => (
                          <div key={habit.id} className="border rounded-lg p-3">
                            <div className="flex items-center justify-between mb-2">
                              <div className="flex items-center space-x-2">
                                <Checkbox
                                  checked={habit.completedToday}
                                  onCheckedChange={() => toggleHabitCompletion(student.id, habit.id)}
                                />
                                <span
                                  className={`font-medium ${habit.completedToday ? "line-through text-gray-500" : ""}`}
                                >
                                  {habit.name.length > 20 ? habit.name.substring(0, 20) + "..." : habit.name}
                                </span>
                              </div>
                              <div className="flex items-center space-x-2">
                                <Badge variant={habit.type === "good" ? "default" : "destructive"} className="text-xs">
                                  {habit.streak}
                                </Badge>
                                <Badge variant="outline">{habit.streak} Tage</Badge>
                              </div>
                            </div>

                            {/* Habit Loop Display */}
                            {(habit.cue || habit.craving || habit.response || habit.reward) && (
                              <div className="grid grid-cols-2 gap-2 text-xs mb-2">
                                {habit.cue && (
                                  <div className="p-2 bg-indigo-50 rounded">
                                    <span className="font-medium text-indigo-700">Cue:</span>
                                    <p className="text-indigo-600">{habit.cue}</p>
                                  </div>
                                )}
                                {habit.craving && (
                                  <div className="p-2 bg-purple-50 rounded">
                                    <span className="font-medium text-purple-700">Craving:</span>
                                    <p className="text-purple-600">{habit.craving}</p>
                                  </div>
                                )}
                                {habit.response && (
                                  <div className="p-2 bg-green-50 rounded">
                                    <span className="font-medium text-green-700">Response:</span>
                                    <p className="text-green-600">{habit.response}</p>
                                  </div>
                                )}
                                {habit.reward && (
                                  <div className="p-2 bg-orange-50 rounded">
                                    <span className="font-medium text-orange-700">Reward:</span>
                                    <p className="text-orange-600">{habit.reward}</p>
                                  </div>
                                )}
                              </div>
                            )}

                            <div className="grid grid-cols-2 gap-2 text-xs">
                              {habit.type === "good" ? (
                                <>
                                  {habit.obvious && (
                                    <div>
                                      <span className="font-medium text-blue-600">Obvious:</span>
                                      <p className="text-gray-600">{habit.obvious}</p>
                                    </div>
                                  )}
                                  {habit.attractive && (
                                    <div>
                                      <span className="font-medium text-green-600">Attractive:</span>
                                      <p className="text-gray-600">{habit.attractive}</p>
                                    </div>
                                  )}
                                  {habit.easy && (
                                    <div>
                                      <span className="font-medium text-yellow-600">Easy:</span>
                                      <p className="text-gray-600">{habit.easy}</p>
                                    </div>
                                  )}
                                  {habit.satisfying && (
                                    <div>
                                      <span className="font-medium text-purple-600">Satisfying:</span>
                                      <p className="text-gray-600">{habit.satisfying}</p>
                                    </div>
                                  )}
                                </>
                              ) : (
                                <>
                                  {habit.invisible && (
                                    <div>
                                      <span className="font-medium text-gray-600">Invisible:</span>
                                      <p className="text-gray-600">{habit.invisible}</p>
                                    </div>
                                  )}
                                  {habit.unattractive && (
                                    <div>
                                      <span className="font-medium text-red-600">Unattractive:</span>
                                      <p className="text-gray-600">{habit.unattractive}</p>
                                    </div>
                                  )}
                                  {habit.difficult && (
                                    <div>
                                      <span className="font-medium text-orange-600">Difficult:</span>
                                      <p className="text-gray-600">{habit.difficult}</p>
                                    </div>
                                  )}
                                  {habit.unsatisfying && (
                                    <div>
                                      <span className="font-medium text-pink-600">Unsatisfying:</span>
                                      <p className="text-gray-600">{habit.unsatisfying}</p>
                                    </div>
                                  )}
                                </>
                              )}
                            </div>
                          </div>
                        ))}
                        {student.habits.length === 0 && (
                          <p className="text-gray-500 text-center py-4">Noch keine Habits hinzugefügt</p>
                        )}
                      </div>
                    </CardContent>
                  </Card>
                ))}
              </div>
            </TabsContent>

            <TabsContent value="learning" className="space-y-6">
              <Card>
                <CardHeader>
                  <CardTitle>Lernmethoden Tracker</CardTitle>
                  <CardDescription>Verfolge die Nutzung verschiedener Lernmethoden in der Klasse</CardDescription>
                </CardHeader>
              </Card>

              <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                {students.map((student) => (
                  <Card key={student.id}>
                    <CardHeader>
                      <CardTitle className="flex items-center justify-between">
                        <div className="flex items-center gap-2">
                          <BookOpen className="h-5 w-5" />
                          {student.name}
                        </div>
                        <div className="flex items-center gap-2">
                          <Badge variant="outline" className="text-xs">
                            <Zap className="h-3 w-3 mr-1" />
                            {student.rewards.elixir}
                          </Badge>
                          <Badge variant="outline" className="text-xs">
                            <Coins className="h-3 w-3 mr-1" />
                            {student.rewards.gold}
                          </Badge>
                        </div>
                      </CardTitle>
                    </CardHeader>
                    <CardContent>
                      <div className="space-y-4">
                        {student.learningMethods.map((method) => (
                          <div key={method.method} className="flex items-center justify-between p-3 border rounded-lg">
                            <div>
                              <h4 className="font-medium">{method.method}</h4>
                              <p className="text-sm text-gray-600">
                                Diese Woche: {method.sessionsThisWeek} • Gesamt: {method.totalSessions}
                              </p>
                              {method.lastUsed && <p className="text-xs text-gray-500">Zuletzt: {method.lastUsed}</p>}
                            </div>
                            <Button
                              size="sm"
                              onClick={() => updateLearningMethod(student.id, method.method)}
                              className="bg-green-600 hover:bg-green-700"
                            >
                              <Plus className="h-4 w-4" />
                            </Button>
                          </div>
                        ))}
                      </div>
                    </CardContent>
                  </Card>
                ))}
              </div>

              <Card>
                <CardHeader>
                  <CardTitle>Lernmethoden Übersicht</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                    {learningMethods.map((method) => {
                      const totalUsage = students.reduce((sum, student) => {
                        const methodData = student.learningMethods.find((lm) => lm.method === method)
                        return sum + (methodData?.sessionsThisWeek || 0)
                      }, 0)

                      return (
                        <div key={method} className="p-4 border rounded-lg">
                          <h3 className="font-medium mb-2">{method}</h3>
                          <div className="flex items-center justify-between">
                            <span className="text-sm text-gray-600">Diese Woche</span>
                            <Badge variant="outline">{totalUsage} Sessions</Badge>
                          </div>
                        </div>
                      )
                    })}
                  </div>
                </CardContent>
              </Card>
            </TabsContent>

            <TabsContent value="leaderboard" className="space-y-6">
              <Leaderboard

              />
            </TabsContent>

            <TabsContent value="chat" className="space-y-6">
              <ClassChat
                currentUserId={currentUser.id}
                currentUserName={currentUser.name}
                currentUserType={currentUser.type}
                messages={chatMessages}
                onSendMessage={sendChatMessage}
              />
            </TabsContent>
          </Tabs>
        ) : (
          // Student View with enhanced features
          currentStudent && (
            <Tabs defaultValue="habits" className="space-y-6">
              <TabsList className="grid w-full grid-cols-8">
                <TabsTrigger value="daily">Daily Tasks</TabsTrigger>
                <TabsTrigger value="habits">Meine Habits</TabsTrigger>
                <TabsTrigger value="learning">Lernmethoden</TabsTrigger>
                <TabsTrigger value="calendar">Kalender</TabsTrigger>
                <TabsTrigger value="progress">Fortschritt</TabsTrigger>
                <TabsTrigger value="rewards">Belohnungen</TabsTrigger>
                <TabsTrigger value="leaderboard">Leaderboard</TabsTrigger>
                <TabsTrigger value="chat">Chat</TabsTrigger>
              </TabsList>

              <TabsContent value="daily" className="space-y-6">
                <Card className="bg-gradient-to-r from-green-50 to-blue-50 border-green-200">
                  <CardHeader>
                    <div className="flex items-center gap-3 mb-4">
                      <Target className="h-8 w-8 text-green-600" />
                      <div>
                        <CardTitle className="text-2xl text-green-600">Willkommen bei Accroche-toi</CardTitle>
                        <CardDescription className="text-lg font-medium text-gray-700">
                          Clever lernen. Gewohnheiten verankern. Erfolg beginnt bei dir.
                        </CardDescription>
                      </div>
                    </div>
                  </CardHeader>
                  <CardContent className="space-y-6">
                    <div className="prose prose-sm max-w-none">
                      <p className="text-gray-700 leading-relaxed">
                        Accroche-toi ist deine tägliche Begleiterin, wenn es darum geht, besser zu lernen, gute
                        Gewohnheiten zu entwickeln und dranzubleiben. Basierend auf Erkenntnissen aus der
                        Lernpsychologie und bewährten Methoden hilft dir die App:
                      </p>

                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4 my-6">
                        <div className="space-y-3">
                          <div className="flex items-start gap-2">
                            <CheckCircle className="h-5 w-5 text-green-600 mt-0.5 flex-shrink-0" />
                            <span className="text-sm text-gray-700">
                              Effektive Lernroutinen aufzubauen – Schritt für Schritt
                            </span>
                          </div>
                          <div className="flex items-start gap-2">
                            <CheckCircle className="h-5 w-5 text-green-600 mt-0.5 flex-shrink-0" />
                            <span className="text-sm text-gray-700">
                              Die passende Lernmethode für dich zu finden – z. B. Active Recall, Feynman, SQ3R, u. v. m.
                            </span>
                          </div>
                          <div className="flex items-start gap-2">
                            <CheckCircle className="h-5 w-5 text-green-600 mt-0.5 flex-shrink-0" />
                            <span className="text-sm text-gray-700">Deinen Lernfortschritt sichtbar zu machen</span>
                          </div>
                        </div>
                        <div className="space-y-3">
                          <div className="flex items-start gap-2">
                            <CheckCircle className="h-5 w-5 text-green-600 mt-0.5 flex-shrink-0" />
                            <span className="text-sm text-gray-700">
                              Dranzubleiben – mit Motivation, Struktur und Belohnung
                            </span>
                          </div>
                          <div className="flex items-start gap-2">
                            <CheckCircle className="h-5 w-5 text-green-600 mt-0.5 flex-shrink-0" />
                            <span className="text-sm text-gray-700">
                              Dein Wissen wirklich zu verstehen und langfristig zu behalten
                            </span>
                          </div>
                        </div>
                      </div>

                      <div className="bg-green-100 p-4 rounded-lg border border-green-200">
                        <div className="flex items-center gap-2 mb-2">
                          <div className="text-lg">🔁</div>
                          <span className="font-semibold text-green-800">
                            Gewohnheiten + Methoden + Motivation = dein persönliches Erfolgssystem.
                          </span>
                        </div>
                        <div className="flex items-center gap-2">
                          <div className="text-lg">🎯</div>
                          <span className="font-semibold text-green-800">
                            Du willst klüger lernen statt länger? Dann bist du hier genau richtig.
                          </span>
                        </div>
                      </div>
                    </div>
                  </CardContent>
                </Card>

                <Card>
                  <CardHeader>
                    <CardTitle className="flex items-center gap-2">
                      <BookOpen className="h-6 w-6 text-blue-600" />
                      Und warum bringt mir das was?
                    </CardTitle>
                    <CardDescription>Die wissenschaftlichen Grundlagen von Atomic Habits</CardDescription>
                  </CardHeader>
                  <CardContent>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                      <div className="space-y-4">
                        <div className="border-l-4 border-blue-500 pl-4">
                          <h4 className="font-semibold text-blue-700 mb-2">1. Macht kleiner Gewohnheiten</h4>
                          <ul className="text-sm text-gray-600 space-y-1">
                            <li>• Kleine Veränderungen (1 %) führen zu langfristig signifikanten Verbesserungen</li>
                            <li>• Fokus auf Systeme/Prozesse statt allein auf Ziele</li>
                            <li>• Kontinuität über Zeit entscheidend für Erfolg</li>
                          </ul>
                        </div>

                        <div className="border-l-4 border-green-500 pl-4">
                          <h4 className="font-semibold text-green-700 mb-2">2. Identität und Gewohnheiten</h4>
                          <ul className="text-sm text-gray-600 space-y-1">
                            <li>• Gewohnheiten formen und reflektieren die eigene Identität</li>
                            <li>
                              • Veränderung erfolgt durch Identitätswandel („Wer will ich sein?" statt „Was will ich
                              erreichen?")
                            </li>
                            <li>• Verhalten als Beweis für Identität (Selbstwahrnehmung)</li>
                          </ul>
                        </div>

                        <div className="border-l-4 border-purple-500 pl-4">
                          <h4 className="font-semibold text-purple-700 mb-2">3. Vier Gesetze der Verhaltensänderung</h4>
                          <ul className="text-sm text-gray-600 space-y-1">
                            <li>• 1. Mach es offensichtlich</li>
                            <li>• 2. Mach es attraktiv</li>
                            <li>• 3. Mach es einfach</li>
                            <li>• 4. Mach es befriedigend</li>
                            <li>• Grundlage zur systematischen Gewohnheitsbildung und -änderung</li>
                          </ul>
                        </div>

                        <div className="border-l-4 border-yellow-500 pl-4">
                          <h4 className="font-semibold text-yellow-700 mb-2">4. Gesetz 1: Mach es offensichtlich</h4>
                          <ul className="text-sm text-gray-600 space-y-1">
                            <li>• Umgebung gezielt gestalten (sichtbare Hinweise/Auslöser)</li>
                            <li>• „Habit Stacking" (neue Gewohnheit an bestehende koppeln)</li>
                            <li>• Verwendung von Habit-Trackern zur Selbstkontrolle</li>
                          </ul>
                        </div>

                        <div className="border-l-4 border-pink-500 pl-4">
                          <h4 className="font-semibold text-pink-700 mb-2">5. Gesetz 2: Mach es attraktiv</h4>
                          <ul className="text-sm text-gray-600 space-y-1">
                            <li>• Positive Assoziationen und Belohnungen verstärken Motivation</li>
                            <li>• „Temptation Bundling" (unangenehme Gewohnheit mit angenehmer kombinieren)</li>
                            <li>• Soziale Zugehörigkeit als Motivationsfaktor</li>
                          </ul>
                        </div>
                      </div>

                      <div className="space-y-4">
                        <div className="border-l-4 border-orange-500 pl-4">
                          <h4 className="font-semibold text-orange-700 mb-2">6. Gesetz 3: Mach es einfach</h4>
                          <ul className="text-sm text-gray-600 space-y-1">
                            <li>• Handlung auf kleine, leicht ausführbare Schritte reduzieren („Two-Minute Rule")</li>
                            <li>• Barrieren abbauen, Vorbereitung der Umgebung</li>
                            <li>• Minimierung von Entscheidungsmüdigkeit</li>
                          </ul>
                        </div>

                        <div className="border-l-4 border-red-500 pl-4">
                          <h4 className="font-semibold text-red-700 mb-2">7. Gesetz 4: Mach es befriedigend</h4>
                          <ul className="text-sm text-gray-600 space-y-1">
                            <li>• Sofortige Belohnungen oder positives Feedback fördern Wiederholung</li>
                            <li>• Visuelle Erfolgskontrolle (z. B. Abhaken)</li>
                            <li>• Vermeidung negativer Verstärkung</li>
                          </ul>
                        </div>

                        <div className="border-l-4 border-indigo-500 pl-4">
                          <h4 className="font-semibold text-indigo-700 mb-2">
                            8. Goldlöckchen-Regel (Goldilocks Rule)
                          </h4>
                          <ul className="text-sm text-gray-600 space-y-1">
                            <li>• Optimale Schwierigkeit steigert Motivation und Leistungsfähigkeit</li>
                            <li>• Vermeidung von Überforderung und Langeweile</li>
                            <li>• Erleichtert „Flow"-Zustand</li>
                          </ul>
                        </div>

                        <div className="border-l-4 border-teal-500 pl-4">
                          <h4 className="font-semibold text-teal-700 mb-2">9. Umgang mit Rückschlägen</h4>
                          <ul className="text-sm text-gray-600 space-y-1">
                            <li>
                              • Fehler sind normal, Fokus auf schnelles Wiederaufnehmen der Gewohnheit („Never miss
                              twice")
                            </li>
                            <li>• Systeme wichtiger als Willenskraft</li>
                            <li>• Fehler als Lerngelegenheit</li>
                          </ul>
                        </div>

                        <div className="border-l-4 border-gray-500 pl-4">
                          <h4 className="font-semibold text-gray-700 mb-2">10. Nachhaltigkeit und Langfristigkeit</h4>
                          <ul className="text-sm text-gray-600 space-y-1">
                            <li>• Dauerhafter Erfolg basiert auf stabilen Systemen und Identitätsänderung</li>
                            <li>• Geduld und kontinuierliche Anpassung entscheidend</li>
                            <li>• Lebenslange Entwicklung als Perspektive</li>
                          </ul>
                        </div>
                      </div>
                    </div>
                  </CardContent>
                </Card>
                <DailyTasks
                  studentId={currentStudent.id}
                  tasks={currentStudent.dailyTasks || []}
                  onCompleteTask={(taskId, keywords) => completeDailyTask(currentStudent.id, taskId, keywords)}
                  onResetTasks={() => resetDailyTasks(currentStudent.id)}
                />
              </TabsContent>

              <TabsContent value="habits" className="space-y-6">
                {/* Debug Info */}
                <Card className="bg-yellow-50 border-yellow-200">
                  <CardHeader>
                    <CardTitle className="text-sm text-yellow-800">Debug Info</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="text-xs text-yellow-700">
                      <p>Current Student ID: {currentStudent.id}</p>
                      <p>Habits Count: {currentStudent.habits.length}</p>
                      <p>
                        Habits:{" "}
                        {JSON.stringify(
                          currentStudent.habits.map((h) => ({ id: h.id, name: h.name })),
                          null,
                          2,
                        )}
                      </p>
                    </div>
                  </CardContent>
                </Card>

                {/* Success Curve für Student */}
                <SuccessCurve activities={currentStudent.activities} studentName={currentStudent.name} />

                <Card>
                  <CardHeader>
                    <CardTitle>Neues Habit hinzufügen</CardTitle>
                    <CardDescription>
                      Erstelle ein neues Habit basierend auf dem Habit Loop und den 4 Gesetzen der Verhaltensänderung
                    </CardDescription>
                  </CardHeader>
                  <CardContent className="space-y-4">
                    <div>
                      <Label htmlFor="habit-type">Habit-Typ</Label>
                      <Select
                        value={newHabit.type}
                        onValueChange={(value: "good" | "bad") => setNewHabit({ ...newHabit, type: value })}
                      >
                        <SelectTrigger>
                          <SelectValue />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="good">Gutes Habit</SelectItem>
                          <SelectItem value="bad">Schlechtes Habit</SelectItem>
                        </SelectContent>
                      </Select>
                    </div>

                    <div>
                      <Label htmlFor="habit-name">Habit Name</Label>
                      <Input
                        id="habit-name"
                        placeholder="z.B. Täglich 30 Minuten lesen"
                        value={newHabit.name}
                        onChange={(e) => setNewHabit({ ...newHabit, name: e.target.value })}
                      />
                    </div>

                    <HabitLoopForm habitType={newHabit.type} values={newHabit} onChange={handleHabitFormChange} />

                    <Button
                      onClick={addGewohnheit}
                      disabled={!newHabit.name.trim()}
                      className="bg-green-600 hover:bg-green-700"
                    >
                      <Plus className="h-4 w-4 mr-2" />
                      Habit hinzufügen (+5 Elixir, +25 Gold, +50 XP)
                    </Button>
                  </CardContent>
                </Card>

                <Card>
                  <CardHeader>
                    <CardTitle>Meine Habits</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-3">
                      {currentStudent.habits.map((habit) => (
                        <div key={habit.id} className="border rounded-lg p-4">
                          <div className="flex items-center justify-between mb-3">
                            <div className="flex items-center space-x-3">
                              <Checkbox
                                checked={habit.completedToday}
                                onCheckedChange={() => toggleHabitCompletion(currentStudent.id, habit.id)}
                              />
                              <span
                                className={`font-medium text-lg ${habit.completedToday ? "line-through text-gray-500" : ""}`}
                              >
                                {habit.name}
                              </span>
                            </div>
                            <div className="flex items-center space-x-2">
                              <Badge variant={habit.type === "good" ? "default" : "destructive"}>
                                {habit.type === "good" ? "Gut" : "Schlecht"}
                              </Badge>
                              <Badge variant="outline" className="text-lg px-3 py-1">
                                {habit.streak} Tage
                              </Badge>
                            </div>
                          </div>

                          {/* Habit Loop Display */}
                          {(habit.cue || habit.craving || habit.response || habit.reward) && (
                            <div className="grid grid-cols-1 md:grid-cols-2 gap-3 text-sm mb-3">
                              {habit.cue && (
                                <div className="p-2 bg-indigo-50 rounded">
                                  <span className="font-medium text-indigo-700">Cue (Auslöser):</span>
                                  <p className="text-indigo-600">{habit.cue}</p>
                                </div>
                              )}
                              {habit.craving && (
                                <div className="p-2 bg-purple-50 rounded">
                                  <span className="font-medium text-purple-700">Craving (Verlangen):</span>
                                  <p className="text-purple-600">{habit.craving}</p>
                                </div>
                              )}
                              {habit.response && (
                                <div className="p-2 bg-green-50 rounded">
                                  <span className="font-medium text-green-700">Response (Reaktion):</span>
                                  <p className="text-green-600">{habit.response}</p>
                                </div>
                              )}
                              {habit.reward && (
                                <div className="p-2 bg-orange-50 rounded">
                                  <span className="font-medium text-orange-700">Reward (Belohnung):</span>
                                  <p className="text-orange-600">{habit.reward}</p>
                                </div>
                              )}
                            </div>
                          )}

                          <div className="grid grid-cols-1 md:grid-cols-2 gap-3 text-sm">
                            {habit.type === "good" ? (
                              <>
                                {habit.obvious && (
                                  <div className="p-2 bg-blue-50 rounded">
                                    <span className="font-medium text-blue-700">Obvious:</span>
                                    <p className="text-blue-600">{habit.obvious}</p>
                                  </div>
                                )}
                                {habit.attractive && (
                                  <div className="p-2 bg-green-50 rounded">
                                    <span className="font-medium text-green-700">Attractive:</span>
                                    <p className="text-green-600">{habit.attractive}</p>
                                  </div>
                                )}
                                {habit.easy && (
                                  <div className="p-2 bg-yellow-50 rounded">
                                    <span className="font-medium text-yellow-700">Easy:</span>
                                    <p className="text-yellow-600">{habit.easy}</p>
                                  </div>
                                )}
                                {habit.satisfying && (
                                  <div className="p-2 bg-purple-50 rounded">
                                    <span className="font-medium text-purple-700">Satisfying:</span>
                                    <p className="text-purple-600">{habit.satisfying}</p>
                                  </div>
                                )}
                              </>
                            ) : (
                              <>
                                {habit.invisible && (
                                  <div className="p-2 bg-gray-50 rounded">
                                    <span className="font-medium text-gray-700">Invisible:</span>
                                    <p className="text-gray-600">{habit.invisible}</p>
                                  </div>
                                )}
                                {habit.unattractive && (
                                  <div className="p-2 bg-red-50 rounded">
                                    <span className="font-medium text-red-700">Unattractive:</span>
                                    <p className="text-red-600">{habit.unattractive}</p>
                                  </div>
                                )}
                                {habit.difficult && (
                                  <div className="p-2 bg-orange-50 rounded">
                                    <span className="font-medium text-orange-700">Difficult:</span>
                                    <p className="text-orange-600">{habit.difficult}</p>
                                  </div>
                                )}
                                {habit.unsatisfying && (
                                  <div className="p-2 bg-pink-50 rounded">
                                    <span className="font-medium text-pink-700">Unsatisfying:</span>
                                    <p className="text-pink-600">{habit.unsatisfying}</p>
                                  </div>
                                )}
                              </>
                            )}
                          </div>
                        </div>
                      ))}
                      {currentStudent.habits.length === 0 && (
                        <p className="text-gray-500 text-center py-8">
                          Noch keine Habits hinzugefügt. Erstelle dein erstes Habit oben!
                        </p>
                      )}
                    </div>
                  </CardContent>
                </Card>
              </TabsContent>

              <TabsContent value="learning" className="space-y-6">
                <LearningMethodsInfo />

                <LearningMethods
                  currentStudentId={currentStudent.id}
                  allStudents={students.map((s) => ({ id: s.id, name: s.name }))}
                  onUseMethod={(method, description) => handleLearningMethodUse(currentStudent.id, method, description)}
                  onGroupLearning={handleGroupLearning}
                  studentLevel={currentStudent.rewards.level}
                />

                <Card>
                  <CardHeader>
                    <CardTitle className="flex items-center gap-2">
                      <BookOpen className="h-5 w-5" />
                      Meine Lernmethoden Statistiken
                    </CardTitle>
                    <CardDescription>Verfolge deine Nutzung verschiedener Lernmethoden</CardDescription>
                  </CardHeader>
                  <CardContent>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      {currentStudent.learningMethods.map((method) => (
                        <div key={method.method} className="flex items-center justify-between p-4 border rounded-lg">
                          <div>
                            <h4 className="font-medium">{method.method}</h4>
                            <p className="text-sm text-gray-600">
                              Diese Woche: {method.sessionsThisWeek} • Gesamt: {method.totalSessions}
                            </p>
                            {method.lastUsed && <p className="text-xs text-gray-500">Zuletzt: {method.lastUsed}</p>}
                          </div>
                          <Badge variant="outline" className="text-lg px-3 py-1">
                            {method.totalSessions}
                          </Badge>
                        </div>
                      ))}
                    </div>
                  </CardContent>
                </Card>
              </TabsContent>

              <TabsContent value="calendar" className="space-y-6">
                <CalendarView
                  studentId={currentStudent.id}
                  events={currentStudent.calendarEvents}
                  onAddEvent={(event) => addCalendarEvent(currentStudent.id, event)}
                  onUpdateEvent={(eventId, updates) => updateCalendarEvent(currentStudent.id, eventId, updates)}
                  onDeleteEvent={(eventId) => deleteCalendarEvent(currentStudent.id, eventId)}
                />

                <EmailNotifications
                  studentId={currentStudent.id}
                  settings={
                    currentStudent.emailSettings || {
                      email: "",
                      enabled: false,
                      studyReminders: true,
                      homeworkReminders: true,
                      examReminders: true,
                      dailyDigest: false,
                    }
                  }
                  onUpdateSettings={(settings) => updateEmailSettings(currentStudent.id, settings)}
                />
              </TabsContent>

              <TabsContent value="progress" className="space-y-6">

                <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                  <Card>
                    <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                      <CardTitle className="text-sm font-medium">Meine Habits</CardTitle>
                      <Target className="h-4 w-4 text-muted-foreground" />
                    </CardHeader>
                    <CardContent>
                      <div className="text-2xl font-bold">{currentStudent.habits.length}</div>
                    </CardContent>
                  </Card>

                  <Card>
                    <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                      <CardTitle className="text-sm font-medium">Heute erledigt</CardTitle>
                      <CheckCircle className="h-4 w-4 text-muted-foreground" />
                    </CardHeader>
                    <CardContent>
                      <div className="text-2xl font-bold">
                        {currentStudent.habits.filter((h) => h.completedToday).length}/{currentStudent.habits.length}
                      </div>
                      <Progress
                        value={
                          (currentStudent.habits.filter((h) => h.completedToday).length /
                            Math.max(currentStudent.habits.length, 1)) *
                          100
                        }
                        className="mt-2"
                      />
                    </CardContent>
                  </Card>

                  <Card>
                    <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                      <CardTitle className="text-sm font-medium">Kommende Termine</CardTitle>
                      <CalendarIcon className="h-4 w-4 text-muted-foreground" />
                    </CardHeader>
                    <CardContent>
                      <div className="text-2xl font-bold">
                        {currentStudent.calendarEvents.filter((event) => new Date(event.date) >= new Date()).length}
                      </div>
                    </CardContent>
                  </Card>
                </div>

                <Card>
                  <CardHeader>
                    <CardTitle>Mein Fortschritt</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-4">
                      <div>
                        <h3 className="font-medium mb-2">Habits Übersicht</h3>
                        <div className="space-y-2">
                          {currentStudent.habits.map((habit) => (
                            <div key={habit.id} className="flex items-center justify-between p-2 border rounded">
                              <span className={habit.completedToday ? "line-through text-gray-500" : ""}>
                                {habit.name}
                              </span>
                              <div className="flex items-center gap-2">
                                <Badge variant={habit.type === "good" ? "default" : "destructive"} className="text-xs">
                                  {habit.type === "good" ? "Gut" : "Schlecht"}
                                </Badge>
                                <Badge variant="outline">{habit.streak} Tage</Badge>
                              </div>
                            </div>
                          ))}
                        </div>
                      </div>

                      <div>
                        <h3 className="font-medium mb-2">Aktive Lernmethoden diese Woche</h3>
                        <div className="flex flex-wrap gap-2">
                          {currentStudent.learningMethods
                            .filter((lm) => lm.sessionsThisWeek > 0)
                            .map((lm) => (
                              <Badge key={lm.method} variant="outline">
                                {lm.method} ({lm.sessionsThisWeek})
                              </Badge>
                            ))}
                          {currentStudent.learningMethods.filter((lm) => lm.sessionsThisWeek > 0).length === 0 && (
                            <p className="text-gray-500 text-sm">Noch keine Lernmethoden diese Woche verwendet</p>
                          )}
                        </div>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              </TabsContent>

              <TabsContent value="rewards" className="space-y-6">
                <RewardSystem
                  elixir={currentStudent.rewards.elixir}
                  gold={currentStudent.rewards.gold}
                  level={currentStudent.rewards.level}
                  experiencePoints={currentStudent.rewards.experiencePoints}
                  nextLevelXP={currentStudent.rewards.nextLevelXP}
                />

                <div className="bg-white/50 p-3 rounded-lg">
                  <h4 className="font-semibold text-sm mb-2">Wie verdiene ich Belohnungen?</h4>
                  <div className="space-y-1 text-xs text-gray-600">
                    <div className="flex justify-between">
                      <span>• Habit abschließen</span>
                      <span className="text-blue-600">+2 Elixir, +15 Gold, +20 XP</span>
                    </div>
                    <div className="flex justify-between">
                      <span>• Lernmethode nutzen</span>
                      <span className="text-blue-600">+5 Elixir, +2 Gold, +15 XP</span>
                    </div>
                    <div className="flex justify-between">
                      <span>• Daily Task erledigen</span>
                      <span className="text-blue-600">+8 Elixir, +5 Gold, +25 XP</span>
                    </div>
                    <div className="flex justify-between">
                      <span>• Neues Habit erstellen</span>
                      <span className="text-blue-600">+5 Elixir, +25 Gold, +50 XP</span>
                    </div>
                    <div className="flex justify-between">
                      <span>• 7-Tage Streak</span>
                      <span className="text-blue-600">+15 Elixir, +35 Gold, +100 XP</span>
                    </div>
                    <div className="flex justify-between">
                      <span>• Gruppenlernaktivität</span>
                      <span className="text-blue-600">+3 Elixir, +1 Gold, +10 XP</span>
                    </div>
                  </div>
                </div>

                <Card>
                  <CardHeader>
                    <CardTitle className="flex items-center gap-2">
                      <Trophy className="h-5 w-5 text-yellow-500" />
                      Meine Erfolge
                    </CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div className="p-4 border rounded-lg text-center">
                        <div className="text-2xl font-bold text-blue-600">{currentStudent.habits.length}</div>
                        <div className="text-sm text-gray-600">Habits erstellt</div>
                      </div>

                      <div className="p-4 border rounded-lg text-center">
                        <div className="text-2xl font-bold text-green-600">
                          {currentStudent.habits.reduce((sum, habit) => sum + habit.streak, 0)}
                        </div>
                        <div className="text-sm text-gray-600">Gesamt Streak-Tage</div>
                      </div>

                      <div className="p-4 border rounded-lg text-center">
                        <div className="text-2xl font-bold text-purple-600">
                          {currentStudent.learningMethods.reduce((sum, method) => sum + method.totalSessions, 0)}
                        </div>
                        <div className="text-sm text-gray-600">Lernmethoden-Sessions</div>
                      </div>

                      <div className="p-4 border rounded-lg text-center">
                        <div className="text-2xl font-bold text-orange-600">
                          {Math.max(...currentStudent.habits.map((h) => h.streak), 0)}
                        </div>
                        <div className="text-sm text-gray-600">Längste Streak</div>
                      </div>

                      <div className="p-4 border rounded-lg text-center">
                        <div className="text-2xl font-bold text-red-600">
                          {currentStudent.calendarEvents.filter((e) => e.type === "exam").length}
                        </div>
                        <div className="text-sm text-gray-600">Geplante Prüfungen</div>
                      </div>

                      <div className="p-4 border rounded-lg text-center">
                        <div className="text-2xl font-bold text-indigo-600">
                          {currentStudent.calendarEvents.filter((e) => e.type === "homework" && e.completed).length}
                        </div>
                        <div className="text-sm text-gray-600">Erledigte Hausaufgaben</div>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              </TabsContent>

              <TabsContent value="leaderboard" className="space-y-6">
                <Leaderboard

                />
              </TabsContent>

              <TabsContent value="chat" className="space-y-6">
                <ClassChat
                  currentUserId={currentUser.id}
                  currentUserName={currentUser.name}
                  currentUserType={currentUser.type}
                  messages={chatMessages}
                  onSendMessage={sendChatMessage}
                />
              </TabsContent>
            </Tabs>
          )
        )}
      </div>
      {/* Keyword Verification Dialog */}
      <KeywordVerificationDialog
        open={showKeywordDialog}
        onOpenChange={setShowKeywordDialog}
        title={currentVerification?.title || ""}
        description={currentVerification?.description || ""}
        requiredKeywords={currentVerification?.requiredKeywords || []}
        onVerify={handleKeywordVerification}
      />
    </div>
  )
}

const updateEmailSettings = (studentId: string, emailSettings: any) => {
  setStudents((prevStudents: Student[]) =>
    prevStudents.map((student) =>
      student.id === studentId ? { ...student, emailSettings } : student
    )
  )
}

function setStudents(arg0: (prevStudents: Student[]) => (Student | {
  emailSettings: any; id: string; name: string; accessCode: string; habits: Gewohnheit[]; learningMethods: LearningMethodProgress[]; rewards: RewardData; calendarEvents: CalendarEvent[]; dailyTasks: DailyTask[]; weeklyStats: {
    completedHabits: number
    completedTasks: number
    learningMethodsUsed: number
    totalPoints: number
  }; activities: Array<{
    date: string
    type: "habit" | "task" | "learning"
    points: number
    name: string
  }>; lastTaskDate?: string
})[]) {
  throw new Error("Function not implemented.")
}
// setStudents is provided by useLocalStorage above, so this stub is not needed and should be removed.
// The actual setStudents comes from:
//   const [students, setStudents, studentsStorage] = useLocalStorage<Student[]>("pasapas-students", initialStudents)
// Remove this unused stub implementation.

