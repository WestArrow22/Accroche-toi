"use client"

import { useState } from "react"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"
import { Badge } from "@/components/ui/badge"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog"
import {
  ChevronLeft,
  ChevronRight,
  Plus,
  CalendarIcon,
  FileText,
  AlertCircle,
  Edit,
  Trash2,
  BookOpen,
  RefreshCw,
} from "lucide-react"

interface CalendarEvent {
  id: string
  title: string
  description: string
  date: string
  type: "exam" | "homework" | "appointment"
  completed?: boolean
  examSize?: "small" | "large" // Neu f√ºr Pr√ºfungen
  isAutoGenerated?: boolean // Neu f√ºr automatische Lerntermine
  parentEventId?: string // Neu f√ºr Verkn√ºpfung mit Hauptevent
  reminderType?: "study" | "review" | "prime" // Neu f√ºr verschiedene Reminder-Typen
}

interface CalendarViewProps {
  studentId: string
  events: CalendarEvent[]
  onAddEvent: (event: Omit<CalendarEvent, "id">) => void
  onUpdateEvent: (eventId: string, event: Partial<CalendarEvent>) => void
  onDeleteEvent: (eventId: string) => void
}

export function CalendarView({ studentId, events, onAddEvent, onUpdateEvent, onDeleteEvent }: CalendarViewProps) {
  const [currentDate, setCurrentDate] = useState(new Date())
  const [selectedDate, setSelectedDate] = useState<string>("")
  const [showAddDialog, setShowAddDialog] = useState(false)
  const [editingEvent, setEditingEvent] = useState<CalendarEvent | null>(null)
  const [newEvent, setNewEvent] = useState({
    title: "",
    description: "",
    date: "",
    type: "homework" as "exam" | "homework" | "appointment",
  })

  const months = [
    "Januar",
    "Februar",
    "M√§rz",
    "April",
    "Mai",
    "Juni",
    "Juli",
    "August",
    "September",
    "Oktober",
    "November",
    "Dezember",
  ]

  const weekdays = ["Mo", "Di", "Mi", "Do", "Fr", "Sa", "So"]

  const getDaysInMonth = (date: Date) => {
    const year = date.getFullYear()
    const month = date.getMonth()
    const firstDay = new Date(year, month, 1)
    const lastDay = new Date(year, month + 1, 0)
    const daysInMonth = lastDay.getDate()
    const startingDayOfWeek = (firstDay.getDay() + 6) % 7 // Montag = 0

    const days = []

    // Leere Tage am Anfang
    for (let i = 0; i < startingDayOfWeek; i++) {
      days.push(null)
    }

    // Tage des Monats
    for (let day = 1; day <= daysInMonth; day++) {
      days.push(day)
    }

    return days
  }

  const formatDate = (year: number, month: number, day: number) => {
    return `${year}-${String(month + 1).padStart(2, "0")}-${String(day).padStart(2, "0")}`
  }

  const getEventsForDate = (dateString: string) => {
    return events.filter((event) => event.date === dateString)
  }

  const generateSpacedRepetitionEvents = (mainEvent: CalendarEvent): CalendarEvent[] => {
    const events: CalendarEvent[] = []
    const examDate = new Date(mainEvent.date + "T00:00:00")

    if (mainEvent.type === "exam" && mainEvent.examSize) {
      const daysBeforeExam = mainEvent.examSize === "large" ? 10 : 7

      // Spaced Repetition Schedule
      const studyDays =
        mainEvent.examSize === "large"
          ? [10, 8, 6, 4, 2, 1] // Gro√üe Pr√ºfung: 6 Lerntermine
          : [7, 5, 3, 1] // Kleine Pr√ºfung: 4 Lerntermine

      studyDays.forEach((daysBefore, index) => {
        const studyDate = new Date(examDate)
        studyDate.setDate(studyDate.getDate() - daysBefore)

        const intensity = daysBefore <= 2 ? "Intensive Wiederholung" : daysBefore <= 4 ? "Vertiefung" : "√úberblick"

        events.push({
          id: `study-${mainEvent.id}-${daysBefore}`,
          title: `üìö Lernen: ${mainEvent.title}`,
          description: `${intensity} f√ºr ${mainEvent.title} (${daysBefore} Tage vor Pr√ºfung)`,
          date: studyDate.toISOString().split("T")[0],
          type: "appointment",
          isAutoGenerated: true,
          parentEventId: mainEvent.id,
          reminderType: "study",
        })
      })
    }

    if (mainEvent.type === "homework") {
      // 1 Tag vorher: Priming Reminder
      const primeDate = new Date(examDate)
      primeDate.setDate(primeDate.getDate() - 1)

      events.push({
        id: `prime-${mainEvent.id}`,
        title: `üîÑ Priming: ${mainEvent.title}`,
        description: `Kurze Wiederholung der Hausaufgaben: ${mainEvent.title}`,
        date: primeDate.toISOString().split("T")[0],
        type: "appointment",
        isAutoGenerated: true,
        parentEventId: mainEvent.id,
        reminderType: "prime",
      })
    }

    return events
  }

  const getEventTypeIcon = (event: CalendarEvent) => {
    if (event.isAutoGenerated) {
      switch (event.reminderType) {
        case "study":
          return <BookOpen className="h-3 w-3" />
        case "prime":
          return <RefreshCw className="h-3 w-3" />
        default:
          return <CalendarIcon className="h-3 w-3" />
      }
    }

    switch (event.type) {
      case "exam":
        return <AlertCircle className="h-3 w-3" />
      case "homework":
        return <FileText className="h-3 w-3" />
      case "appointment":
        return <CalendarIcon className="h-3 w-3" />
      default:
        return <CalendarIcon className="h-3 w-3" />
    }
  }

  const getEventTypeColor = (event: CalendarEvent) => {
    if (event.isAutoGenerated) {
      switch (event.reminderType) {
        case "study":
          return "bg-blue-100 text-blue-800 border-blue-200"
        case "prime":
          return "bg-purple-100 text-purple-800 border-purple-200"
        default:
          return "bg-gray-100 text-gray-800 border-gray-200"
      }
    }

    switch (event.type) {
      case "exam":
        return event.examSize === "large"
          ? "bg-red-100 text-red-800 border-red-200"
          : "bg-orange-100 text-orange-800 border-orange-200"
      case "homework":
        return "bg-green-100 text-green-800 border-green-200"
      case "appointment":
        return "bg-gray-100 text-gray-800 border-gray-200"
      default:
        return "bg-gray-100 text-gray-800 border-gray-200"
    }
  }

  const getEventTypeLabel = (type: string) => {
    switch (type) {
      case "exam":
        return "Pr√ºfung"
      case "homework":
        return "Hausaufgabe"
      case "appointment":
        return "Termin"
      default:
        return "Ereignis"
    }
  }

  const handleAddEvent = () => {
    if (newEvent.title && newEvent.date) {
      const mainEvent = {
        ...newEvent,
        completed: newEvent.type === "homework" ? false : undefined,
      }

      // Hauptevent hinzuf√ºgen
      onAddEvent(mainEvent)

      // Automatische Spaced Repetition Events generieren
      const autoEvents = generateSpacedRepetitionEvents(mainEvent)
      autoEvents.forEach((event) => onAddEvent(event))

      setNewEvent({
        title: "",
        description: "",
        date: "",
        type: "homework",
        examSize: undefined,
      })
      setShowAddDialog(false)
    }
  }

  const handleEditEvent = (event: CalendarEvent) => {
    setEditingEvent(event)
    setNewEvent({
      title: event.title,
      description: event.description,
      date: event.date,
      type: event.type,
    })
    setShowAddDialog(true)
  }

  const handleUpdateEvent = () => {
    if (editingEvent && newEvent.title && newEvent.date) {
      onUpdateEvent(editingEvent.id, {
        ...newEvent,
        completed: newEvent.type === "homework" ? editingEvent.completed : undefined,
      })
      setEditingEvent(null)
      setNewEvent({
        title: "",
        description: "",
        date: "",
        type: "homework",
      })
      setShowAddDialog(false)
    }
  }

  const navigateMonth = (direction: number) => {
    setCurrentDate(new Date(currentDate.getFullYear(), currentDate.getMonth() + direction, 1))
  }

  const navigateYear = (direction: number) => {
    setCurrentDate(new Date(currentDate.getFullYear() + direction, currentDate.getMonth(), 1))
  }

  const days = getDaysInMonth(currentDate)
  const today = new Date()
  const isToday = (day: number) => {
    return (
      today.getFullYear() === currentDate.getFullYear() &&
      today.getMonth() === currentDate.getMonth() &&
      today.getDate() === day
    )
  }

  return (
    <div className="space-y-6">
      {/* Kalender Header */}
      <Card>
        <CardHeader>
          <div className="flex items-center justify-between">
            <CardTitle className="flex items-center gap-2">
              <CalendarIcon className="h-5 w-5" />
              Mein Jahreskalender
            </CardTitle>
            <Dialog open={showAddDialog} onOpenChange={setShowAddDialog}>
              <DialogTrigger asChild>
                <Button className="bg-blue-600 hover:bg-blue-700">
                  <Plus className="h-4 w-4 mr-2" />
                  Neuer Eintrag
                </Button>
              </DialogTrigger>
              <DialogContent>
                <DialogHeader>
                  <DialogTitle>{editingEvent ? "Eintrag bearbeiten" : "Neuer Kalendereintrag"}</DialogTitle>
                </DialogHeader>
                <div className="space-y-4">
                  <div>
                    <Label htmlFor="event-type">Typ</Label>
                    <Select
                      value={newEvent.type}
                      onValueChange={(value: "exam" | "homework" | "appointment") =>
                        setNewEvent({ ...newEvent, type: value })
                      }
                    >
                      <SelectTrigger>
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="exam">
                          <div className="flex items-center gap-2">
                            <AlertCircle className="h-4 w-4 text-red-600" />
                            Pr√ºfung
                          </div>
                        </SelectItem>
                        <SelectItem value="homework">
                          <div className="flex items-center gap-2">
                            <FileText className="h-4 w-4 text-blue-600" />
                            Hausaufgabe
                          </div>
                        </SelectItem>
                        <SelectItem value="appointment">
                          <div className="flex items-center gap-2">
                            <CalendarIcon className="h-4 w-4 text-green-600" />
                            Termin
                          </div>
                        </SelectItem>
                      </SelectContent>
                    </Select>
                  </div>

                  {newEvent.type === "exam" && (
                    <div>
                      <Label htmlFor="exam-size">Pr√ºfungsgr√∂√üe</Label>
                      <Select
                        value={newEvent.examSize || "small"}
                        onValueChange={(value: "small" | "large") => setNewEvent({ ...newEvent, examSize: value })}
                      >
                        <SelectTrigger>
                          <SelectValue />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="small">
                            <div className="flex items-center gap-2">
                              <div className="w-3 h-3 bg-orange-400 rounded-full"></div>
                              Kleine Pr√ºfung (1 Woche Vorbereitung)
                            </div>
                          </SelectItem>
                          <SelectItem value="large">
                            <div className="flex items-center gap-2">
                              <div className="w-3 h-3 bg-red-500 rounded-full"></div>
                              Gro√üe Pr√ºfung (10 Tage Vorbereitung)
                            </div>
                          </SelectItem>
                        </SelectContent>
                      </Select>
                    </div>
                  )}

                  <div>
                    <Label htmlFor="event-title">Titel</Label>
                    <Input
                      id="event-title"
                      placeholder="z.B. Mathe-Pr√ºfung, Hausaufgaben Deutsch..."
                      value={newEvent.title}
                      onChange={(e) => setNewEvent({ ...newEvent, title: e.target.value })}
                    />
                  </div>

                  <div>
                    <Label htmlFor="event-date">Datum</Label>
                    <Input
                      id="event-date"
                      type="date"
                      value={newEvent.date}
                      onChange={(e) => setNewEvent({ ...newEvent, date: e.target.value })}
                    />
                  </div>

                  <div>
                    <Label htmlFor="event-description">Beschreibung (optional)</Label>
                    <Textarea
                      id="event-description"
                      placeholder="Zus√§tzliche Details..."
                      value={newEvent.description}
                      onChange={(e) => setNewEvent({ ...newEvent, description: e.target.value })}
                    />
                  </div>

                  <div className="flex gap-2">
                    <Button
                      onClick={editingEvent ? handleUpdateEvent : handleAddEvent}
                      disabled={!newEvent.title || !newEvent.date}
                      className="bg-blue-600 hover:bg-blue-700"
                    >
                      {editingEvent ? "Aktualisieren" : "Hinzuf√ºgen"}
                    </Button>
                    <Button
                      variant="outline"
                      onClick={() => {
                        setShowAddDialog(false)
                        setEditingEvent(null)
                        setNewEvent({
                          title: "",
                          description: "",
                          date: "",
                          type: "homework",
                        })
                      }}
                    >
                      Abbrechen
                    </Button>
                  </div>
                </div>
              </DialogContent>
            </Dialog>
          </div>
        </CardHeader>
      </Card>

      {/* Kalender Navigation */}
      <Card>
        <CardContent className="p-4">
          <div className="flex items-center justify-between mb-4">
            <div className="flex items-center gap-2">
              <Button variant="outline" size="sm" onClick={() => navigateYear(-1)}>
                <ChevronLeft className="h-4 w-4" />
                <ChevronLeft className="h-4 w-4 -ml-1" />
              </Button>
              <Button variant="outline" size="sm" onClick={() => navigateMonth(-1)}>
                <ChevronLeft className="h-4 w-4" />
              </Button>
            </div>

            <h2 className="text-xl font-bold">
              {months[currentDate.getMonth()]} {currentDate.getFullYear()}
            </h2>

            <div className="flex items-center gap-2">
              <Button variant="outline" size="sm" onClick={() => navigateMonth(1)}>
                <ChevronRight className="h-4 w-4" />
              </Button>
              <Button variant="outline" size="sm" onClick={() => navigateYear(1)}>
                <ChevronRight className="h-4 w-4" />
                <ChevronRight className="h-4 w-4 -ml-1" />
              </Button>
            </div>
          </div>

          {/* Wochentage */}
          <div className="grid grid-cols-7 gap-1 mb-2">
            {weekdays.map((day) => (
              <div key={day} className="p-2 text-center text-sm font-medium text-gray-600">
                {day}
              </div>
            ))}
          </div>

          {/* Kalendertage */}
          <div className="grid grid-cols-7 gap-1">
            {days.map((day, index) => {
              if (day === null) {
                return <div key={index} className="p-2 h-24"></div>
              }

              const dateString = formatDate(currentDate.getFullYear(), currentDate.getMonth(), day)
              const dayEvents = getEventsForDate(dateString)
              const isTodayDate = isToday(day)

              return (
                <div
                  key={day}
                  className={`p-1 h-24 border rounded-lg cursor-pointer hover:bg-gray-50 ${
                    isTodayDate ? "bg-blue-50 border-blue-200" : "border-gray-200"
                  } ${selectedDate === dateString ? "ring-2 ring-blue-500" : ""}`}
                  onClick={() => setSelectedDate(selectedDate === dateString ? "" : dateString)}
                >
                  <div className={`text-sm font-medium ${isTodayDate ? "text-blue-600" : "text-gray-900"}`}>{day}</div>
                  <div className="space-y-1 mt-1">
                    {dayEvents.slice(0, 2).map((event) => (
                      <div
                        key={event.id}
                        className={`text-xs p-1 rounded border ${getEventTypeColor(event)} truncate`}
                        title={event.title}
                      >
                        <div className="flex items-center gap-1">
                          {getEventTypeIcon(event)}
                          <span className="truncate">{event.title}</span>
                        </div>
                      </div>
                    ))}
                    {dayEvents.length > 2 && (
                      <div className="text-xs text-gray-500 text-center">+{dayEvents.length - 2} weitere</div>
                    )}
                  </div>
                </div>
              )
            })}
          </div>
        </CardContent>
      </Card>

      {/* Ereignisse f√ºr ausgew√§hlten Tag */}
      {selectedDate && (
        <Card>
          <CardHeader>
            <CardTitle>
              Ereignisse am{" "}
              {new Date(selectedDate + "T00:00:00").toLocaleDateString("de-DE", {
                weekday: "long",
                year: "numeric",
                month: "long",
                day: "numeric",
              })}
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-3">
              {getEventsForDate(selectedDate).map((event) => (
                <div key={event.id} className={`p-4 rounded-lg border ${getEventTypeColor(event)}`}>
                  <div className="flex items-start justify-between">
                    <div className="flex-1">
                      <div className="flex items-center gap-2 mb-2">
                        {getEventTypeIcon(event)}
                        <Badge variant="outline" className="text-xs">
                          {getEventTypeLabel(event.type)}
                        </Badge>
                        <h3 className="font-medium">{event.title}</h3>
                      </div>
                      {event.description && <p className="text-sm text-gray-600 mb-2">{event.description}</p>}
                      {event.type === "homework" && (
                        <div className="flex items-center gap-2">
                          <input
                            type="checkbox"
                            checked={event.completed || false}
                            onChange={(e) => onUpdateEvent(event.id, { completed: e.target.checked })}
                            className="rounded"
                          />
                          <span className={`text-sm ${event.completed ? "line-through text-gray-500" : ""}`}>
                            {event.completed ? "Erledigt" : "Noch zu erledigen"}
                          </span>
                        </div>
                      )}
                    </div>
                    <div className="flex items-center gap-2">
                      <Button variant="outline" size="sm" onClick={() => handleEditEvent(event)}>
                        <Edit className="h-3 w-3" />
                      </Button>
                      <Button variant="outline" size="sm" onClick={() => onDeleteEvent(event.id)}>
                        <Trash2 className="h-3 w-3" />
                      </Button>
                    </div>
                  </div>
                </div>
              ))}
              {getEventsForDate(selectedDate).length === 0 && (
                <p className="text-gray-500 text-center py-4">Keine Ereignisse an diesem Tag</p>
              )}
            </div>
          </CardContent>
        </Card>
      )}

      {/* Kommende Ereignisse */}
      <Card>
        <CardHeader>
          <CardTitle>Kommende Ereignisse</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-3">
            {events
              .filter((event) => new Date(event.date) >= new Date())
              .sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime())
              .slice(0, 5)
              .map((event) => (
                <div key={event.id} className={`p-3 rounded-lg border ${getEventTypeColor(event)}`}>
                  <div className="flex items-center justify-between">
                    <div className="flex items-center gap-3">
                      {getEventTypeIcon(event)}
                      <div>
                        <h4 className="font-medium">{event.title}</h4>
                        <p className="text-sm text-gray-600">
                          {new Date(event.date + "T00:00:00").toLocaleDateString("de-DE", {
                            weekday: "short",
                            day: "numeric",
                            month: "short",
                          })}
                        </p>
                      </div>
                    </div>
                    <Badge variant="outline" className="text-xs">
                      {getEventTypeLabel(event.type)}
                    </Badge>
                  </div>
                </div>
              ))}
            {events.filter((event) => new Date(event.date) >= new Date()).length === 0 && (
              <p className="text-gray-500 text-center py-4">Keine kommenden Ereignisse</p>
            )}
          </div>
        </CardContent>
      </Card>
    </div>
  )
}
